
screentest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f64  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080050f0  080050f0  000150f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f8  080052f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080052f8  080052f8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052f8  080052f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000005b8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000628  20000628  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009113  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b2  00000000  00000000  000291b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000850  00000000  00000000  0002ab68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000778  00000000  00000000  0002b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a587  00000000  00000000  0002bb30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b589  00000000  00000000  000460b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009711f  00000000  00000000  00051640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e875f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000259c  00000000  00000000  000e87b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050d4 	.word	0x080050d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	080050d4 	.word	0x080050d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <GFX_WriteLine>:
	}
}
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 8000b9e:	683a      	ldr	r2, [r7, #0]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1ad3      	subs	r3, r2, r3
 8000ba4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000ba8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	1acb      	subs	r3, r1, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bfb8      	it	lt
 8000bb6:	425b      	neglt	r3, r3
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	bfcc      	ite	gt
 8000bbc:	2301      	movgt	r3, #1
 8000bbe:	2300      	movle	r3, #0
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8000bc4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d00b      	beq.n	8000be4 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	6a3b      	ldr	r3, [r7, #32]
 8000be2:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	dd0b      	ble.n	8000c04 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1ad3      	subs	r3, r2, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	bfb8      	it	lt
 8000c1c:	425b      	neglt	r3, r3
 8000c1e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8000c20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c24:	0fda      	lsrs	r2, r3, #31
 8000c26:	4413      	add	r3, r2
 8000c28:	105b      	asrs	r3, r3, #1
 8000c2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	da02      	bge.n	8000c3a <GFX_WriteLine+0xaa>
	        ystep = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000c38:	e030      	b.n	8000c9c <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8000c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8000c40:	e02c      	b.n	8000c9c <GFX_WriteLine+0x10c>
	        if (steep) {
 8000c42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d009      	beq.n	8000c5e <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	b211      	sxth	r1, r2
 8000c52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f91c 	bl	8000e94 <SSD1306_DrawPixel>
 8000c5c:	e008      	b.n	8000c70 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	b21b      	sxth	r3, r3
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	b211      	sxth	r1, r2
 8000c66:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f912 	bl	8000e94 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8000c70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c72:	8abb      	ldrh	r3, [r7, #20]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8000c7a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	da09      	bge.n	8000c96 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8000c82:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	4413      	add	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8000c8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c8e:	8afb      	ldrh	r3, [r7, #22]
 8000c90:	4413      	add	r3, r2
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	ddce      	ble.n	8000c42 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3730      	adds	r7, #48	; 0x30
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af02      	add	r7, sp, #8
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff ff5e 	bl	8000b90 <GFX_WriteLine>
}
 8000cd4:	bf00      	nop
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <GFX_DrawFillCircleHelper>:
    }
}
#endif
#ifdef FILL_CIRCLE_HELPER
void GFX_DrawFillCircleHelper(int x0, int y0, uint16_t r, uint8_t cornername, int16_t delta, uint8_t color)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	461a      	mov	r2, r3
 8000cea:	460b      	mov	r3, r1
 8000cec:	80fb      	strh	r3, [r7, #6]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	717b      	strb	r3, [r7, #5]

    int16_t f     = 1 - r;
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	f1c3 0301 	rsb	r3, r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	83fb      	strh	r3, [r7, #30]
    int16_t ddF_x = 1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	83bb      	strh	r3, [r7, #28]
    int16_t ddF_y = -2 * r;
 8000d00:	88fb      	ldrh	r3, [r7, #6]
 8000d02:	461a      	mov	r2, r3
 8000d04:	03d2      	lsls	r2, r2, #15
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	837b      	strh	r3, [r7, #26]
    int16_t x     = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	833b      	strh	r3, [r7, #24]
    int16_t y     = r;
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	82fb      	strh	r3, [r7, #22]

    while (x<y) {
 8000d16:	e077      	b.n	8000e08 <GFX_DrawFillCircleHelper+0x12c>
        if (f >= 0) {
 8000d18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0e      	blt.n	8000d3e <GFX_DrawFillCircleHelper+0x62>
            y--;
 8000d20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	3b01      	subs	r3, #1
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 8000d2c:	8b7b      	ldrh	r3, [r7, #26]
 8000d2e:	3302      	adds	r3, #2
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	837b      	strh	r3, [r7, #26]
            f     += ddF_y;
 8000d34:	8bfa      	ldrh	r2, [r7, #30]
 8000d36:	8b7b      	ldrh	r3, [r7, #26]
 8000d38:	4413      	add	r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8000d3e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 8000d4a:	8bbb      	ldrh	r3, [r7, #28]
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	83bb      	strh	r3, [r7, #28]
        f     += ddF_x;
 8000d52:	8bfa      	ldrh	r2, [r7, #30]
 8000d54:	8bbb      	ldrh	r3, [r7, #28]
 8000d56:	4413      	add	r3, r2
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	83fb      	strh	r3, [r7, #30]

        if (cornername & 0x1) {
 8000d5c:	797b      	ldrb	r3, [r7, #5]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d025      	beq.n	8000db2 <GFX_DrawFillCircleHelper+0xd6>
            GFX_DrawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8000d66:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	18d0      	adds	r0, r2, r3
 8000d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	1ad1      	subs	r1, r2, r3
 8000d76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	1c5a      	adds	r2, r3, #1
 8000d7e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000d82:	441a      	add	r2, r3
 8000d84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d88:	f7ff ff91 	bl	8000cae <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8000d8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	18d0      	adds	r0, r2, r3
 8000d94:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d98:	68ba      	ldr	r2, [r7, #8]
 8000d9a:	1ad1      	subs	r1, r2, r3
 8000d9c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000da8:	441a      	add	r2, r3
 8000daa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dae:	f7ff ff7e 	bl	8000cae <GFX_DrawFastVLine>
        }
        if (cornername & 0x2) {
 8000db2:	797b      	ldrb	r3, [r7, #5]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d025      	beq.n	8000e08 <GFX_DrawFillCircleHelper+0x12c>
            GFX_DrawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8000dbc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	1ad0      	subs	r0, r2, r3
 8000dc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	1ad1      	subs	r1, r2, r3
 8000dcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000dd8:	441a      	add	r2, r3
 8000dda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dde:	f7ff ff66 	bl	8000cae <GFX_DrawFastVLine>
            GFX_DrawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8000de2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	1ad0      	subs	r0, r2, r3
 8000dea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	1ad1      	subs	r1, r2, r3
 8000df2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	1c5a      	adds	r2, r3, #1
 8000dfa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8000dfe:	441a      	add	r2, r3
 8000e00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e04:	f7ff ff53 	bl	8000cae <GFX_DrawFastVLine>
    while (x<y) {
 8000e08:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e0c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	db81      	blt.n	8000d18 <GFX_DrawFillCircleHelper+0x3c>
        }
    }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3720      	adds	r7, #32
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <GFX_DrawFillCircle>:
#endif
#if USING_FILL_CIRCLE == 1
void GFX_DrawFillCircle(int x0, int y0, uint16_t r, uint8_t color)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af02      	add	r7, sp, #8
 8000e24:	60f8      	str	r0, [r7, #12]
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	80fb      	strh	r3, [r7, #6]
 8000e30:	4613      	mov	r3, r2
 8000e32:	717b      	strb	r3, [r7, #5]

	GFX_DrawFastVLine(x0, y0-r, 2*r+1, color);
 8000e34:	88fb      	ldrh	r3, [r7, #6]
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	1ad1      	subs	r1, r2, r3
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	797b      	ldrb	r3, [r7, #5]
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f7ff ff33 	bl	8000cae <GFX_DrawFastVLine>
    GFX_DrawFillCircleHelper(x0, y0, r, 3, 0, color);
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	797b      	ldrb	r3, [r7, #5]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2303      	movs	r3, #3
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f7ff ff40 	bl	8000cdc <GFX_DrawFillCircleHelper>
}
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SSD1306_Command>:
static uint8_t buffer[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8];
I2C_HandleTypeDef *ssd1306_i2c;


void SSD1306_Command(uint8_t com)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af04      	add	r7, sp, #16
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(ssd1306_i2c, 0x3C<<1, 0x00, 1, &com, sizeof(com), 100);
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SSD1306_Command+0x2c>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2301      	movs	r3, #1
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2200      	movs	r2, #0
 8000e82:	2178      	movs	r1, #120	; 0x78
 8000e84:	f001 f81c 	bl	8001ec0 <HAL_I2C_Mem_Write>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000048c 	.word	0x2000048c

08000e94 <SSD1306_DrawPixel>:
	HAL_I2C_Mem_Write(ssd1306_i2c, 0x3C<<1, 0x40, 1, &dat, sizeof(dat), 100);
}


void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	80bb      	strh	r3, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	70fb      	strb	r3, [r7, #3]
	 if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8000ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	db79      	blt.n	8000fa2 <SSD1306_DrawPixel+0x10e>
 8000eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb4:	dc75      	bgt.n	8000fa2 <SSD1306_DrawPixel+0x10e>
 8000eb6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db71      	blt.n	8000fa2 <SSD1306_DrawPixel+0x10e>
 8000ebe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ec2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ec4:	dc6d      	bgt.n	8000fa2 <SSD1306_DrawPixel+0x10e>
		 return;

	 switch(Color)
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	2b02      	cmp	r3, #2
 8000eca:	d049      	beq.n	8000f60 <SSD1306_DrawPixel+0xcc>
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	dc69      	bgt.n	8000fa4 <SSD1306_DrawPixel+0x110>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d022      	beq.n	8000f1a <SSD1306_DrawPixel+0x86>
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d165      	bne.n	8000fa4 <SSD1306_DrawPixel+0x110>
	 {
		 case WHITE:   buffer[x+ (y/8)*SSD1306_LCDWIDTH] |=  (1 << (y&7)); break;
 8000ed8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000edc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da00      	bge.n	8000ee6 <SSD1306_DrawPixel+0x52>
 8000ee4:	3307      	adds	r3, #7
 8000ee6:	10db      	asrs	r3, r3, #3
 8000ee8:	b218      	sxth	r0, r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	01db      	lsls	r3, r3, #7
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a2f      	ldr	r2, [pc, #188]	; (8000fb0 <SSD1306_DrawPixel+0x11c>)
 8000ef2:	5cd3      	ldrb	r3, [r2, r3]
 8000ef4:	b25a      	sxtb	r2, r3
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b259      	sxtb	r1, r3
 8000f08:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	01db      	lsls	r3, r3, #7
 8000f10:	4413      	add	r3, r2
 8000f12:	b2c9      	uxtb	r1, r1
 8000f14:	4a26      	ldr	r2, [pc, #152]	; (8000fb0 <SSD1306_DrawPixel+0x11c>)
 8000f16:	54d1      	strb	r1, [r2, r3]
 8000f18:	e044      	b.n	8000fa4 <SSD1306_DrawPixel+0x110>
		 case BLACK:   buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); break;
 8000f1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da00      	bge.n	8000f28 <SSD1306_DrawPixel+0x94>
 8000f26:	3307      	adds	r3, #7
 8000f28:	10db      	asrs	r3, r3, #3
 8000f2a:	b218      	sxth	r0, r3
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	01db      	lsls	r3, r3, #7
 8000f30:	4413      	add	r3, r2
 8000f32:	4a1f      	ldr	r2, [pc, #124]	; (8000fb0 <SSD1306_DrawPixel+0x11c>)
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
 8000f36:	b25a      	sxtb	r2, r3
 8000f38:	88bb      	ldrh	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	b25b      	sxtb	r3, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	b25b      	sxtb	r3, r3
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	b259      	sxtb	r1, r3
 8000f4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f52:	4603      	mov	r3, r0
 8000f54:	01db      	lsls	r3, r3, #7
 8000f56:	4413      	add	r3, r2
 8000f58:	b2c9      	uxtb	r1, r1
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <SSD1306_DrawPixel+0x11c>)
 8000f5c:	54d1      	strb	r1, [r2, r3]
 8000f5e:	e021      	b.n	8000fa4 <SSD1306_DrawPixel+0x110>
		 case INVERSE: buffer[x+ (y/8)*SSD1306_LCDWIDTH] ^=  (1 << (y&7)); break;
 8000f60:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f64:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	da00      	bge.n	8000f6e <SSD1306_DrawPixel+0xda>
 8000f6c:	3307      	adds	r3, #7
 8000f6e:	10db      	asrs	r3, r3, #3
 8000f70:	b218      	sxth	r0, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	4413      	add	r3, r2
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <SSD1306_DrawPixel+0x11c>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	b25a      	sxtb	r2, r3
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	4053      	eors	r3, r2
 8000f8e:	b259      	sxtb	r1, r3
 8000f90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f94:	4603      	mov	r3, r0
 8000f96:	01db      	lsls	r3, r3, #7
 8000f98:	4413      	add	r3, r2
 8000f9a:	b2c9      	uxtb	r1, r1
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <SSD1306_DrawPixel+0x11c>)
 8000f9e:	54d1      	strb	r1, [r2, r3]
 8000fa0:	e000      	b.n	8000fa4 <SSD1306_DrawPixel+0x110>
		 return;
 8000fa2:	bf00      	nop
	 }
}
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000008c 	.word	0x2000008c

08000fb4 <SSD1306_Clear>:
uint8_t SSD1306_ReadPixel(int16_t x, int16_t y){
	return(buffer[x+ (y/8)*SSD1306_LCDWIDTH]);
}

void SSD1306_Clear(uint8_t Color)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	switch (Color)
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d008      	beq.n	8000fd6 <SSD1306_Clear+0x22>
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10d      	bne.n	8000fe4 <SSD1306_Clear+0x30>
	{
		case WHITE:
			memset(buffer, 0xFF, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8000fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fcc:	21ff      	movs	r1, #255	; 0xff
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <SSD1306_Clear+0x38>)
 8000fd0:	f002 fefa 	bl	8003dc8 <memset>
			break;
 8000fd4:	e006      	b.n	8000fe4 <SSD1306_Clear+0x30>
		case BLACK:
			memset(buffer, 0x00, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8));
 8000fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <SSD1306_Clear+0x38>)
 8000fde:	f002 fef3 	bl	8003dc8 <memset>
			break;
 8000fe2:	bf00      	nop
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2000008c 	.word	0x2000008c

08000ff0 <SSD1306_Display>:


void SSD1306_Display(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af04      	add	r7, sp, #16
	SSD1306_Command(0x22);
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff ff34 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x00);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ff31 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x07);
 8001002:	2007      	movs	r0, #7
 8001004:	f7ff ff2e 	bl	8000e64 <SSD1306_Command>
	HAL_I2C_Mem_Write(ssd1306_i2c, 0x3C<<1, 0x40, 1, (uint8_t*)&buffer, (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8), 100);
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <SSD1306_Display+0x3c>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	2364      	movs	r3, #100	; 0x64
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <SSD1306_Display+0x40>)
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	2240      	movs	r2, #64	; 0x40
 800101e:	2178      	movs	r1, #120	; 0x78
 8001020:	f000 ff4e 	bl	8001ec0 <HAL_I2C_Mem_Write>

}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000048c 	.word	0x2000048c
 8001030:	2000008c 	.word	0x2000008c

08001034 <SSD1306_Init>:

void SSD1306_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	SSD1306_Command(0xAE);  // Display Off
 8001038:	20ae      	movs	r0, #174	; 0xae
 800103a:	f7ff ff13 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0x00);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ff10 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x10);
 8001044:	2010      	movs	r0, #16
 8001046:	f7ff ff0d 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x40);
 800104a:	2040      	movs	r0, #64	; 0x40
 800104c:	f7ff ff0a 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x20);  // Set addressing mode
 8001050:	2020      	movs	r0, #32
 8001052:	f7ff ff07 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x00);  // Horizontal Addressing Mode
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff ff04 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0xA6);  // Set Normal Display
 800105c:	20a6      	movs	r0, #166	; 0xa6
 800105e:	f7ff ff01 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0xA8);  // Select Multiplex Ratio
 8001062:	20a8      	movs	r0, #168	; 0xa8
 8001064:	f7ff fefe 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x3F);  // Default => 0x3F (1/64 Duty)	0x1F(1/32 Duty)
 8001068:	203f      	movs	r0, #63	; 0x3f
 800106a:	f7ff fefb 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0xD3);  // Setting Display Offset
 800106e:	20d3      	movs	r0, #211	; 0xd3
 8001070:	f7ff fef8 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x00);  // 00H Reset
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fef5 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0xD5);  // SET DISPLAY CLOCK
 800107a:	20d5      	movs	r0, #213	; 0xd5
 800107c:	f7ff fef2 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x80);  // 105HZ
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	f7ff feef 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0xD9);	// Set Pre-Charge period
 8001086:	20d9      	movs	r0, #217	; 0xd9
 8001088:	f7ff feec 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x22);
 800108c:	2022      	movs	r0, #34	; 0x22
 800108e:	f7ff fee9 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0xDA);  // Set COM Hardware Configuration
 8001092:	20da      	movs	r0, #218	; 0xda
 8001094:	f7ff fee6 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x12);  // Alternative COM Pin---See IC Spec page 34
 8001098:	2012      	movs	r0, #18
 800109a:	f7ff fee3 	bl	8000e64 <SSD1306_Command>
							// (0x02)=> A4=0;Sequential COM pin configuration;A5=0;Disable COM Left/Right remap

	SSD1306_Command(0xDB);	// Set Deselect Vcomh level
 800109e:	20db      	movs	r0, #219	; 0xdb
 80010a0:	f7ff fee0 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x40);
 80010a4:	2040      	movs	r0, #64	; 0x40
 80010a6:	f7ff fedd 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0x8D);  // Set Charge Pump
 80010aa:	208d      	movs	r0, #141	; 0x8d
 80010ac:	f7ff feda 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0x14);  // Endable Charge Pump
 80010b0:	2014      	movs	r0, #20
 80010b2:	f7ff fed7 	bl	8000e64 <SSD1306_Command>

	SSD1306_Command(0xA4);  // Entire Display ON
 80010b6:	20a4      	movs	r0, #164	; 0xa4
 80010b8:	f7ff fed4 	bl	8000e64 <SSD1306_Command>
	SSD1306_Command(0xAF);
 80010bc:	20af      	movs	r0, #175	; 0xaf
 80010be:	f7ff fed1 	bl	8000e64 <SSD1306_Command>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <SSD1306_I2cInit>:

void SSD1306_I2cInit(I2C_HandleTypeDef *i2c)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	ssd1306_i2c = i2c;
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <SSD1306_I2cInit+0x1c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]

	SSD1306_Init();
 80010d6:	f7ff ffad 	bl	8001034 <SSD1306_Init>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000048c 	.word	0x2000048c

080010e8 <ball_init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ball_init(Ball_structTypeDef* ball,int r, int x, int y, float v, int angle){
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6178      	str	r0, [r7, #20]
 80010f0:	6139      	str	r1, [r7, #16]
 80010f2:	60fa      	str	r2, [r7, #12]
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	ed87 0a01 	vstr	s0, [r7, #4]
	ball->r=r;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	611a      	str	r2, [r3, #16]
	ball->x=x;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	edc3 7a02 	vstr	s15, [r3, #8]
	ball->y=y;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	ee07 3a90 	vmov	s15, r3
 8001116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	edc3 7a03 	vstr	s15, [r3, #12]
	ball->v_x=1;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001126:	601a      	str	r2, [r3, #0]
	ball->v_y=1;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800112e:	605a      	str	r2, [r3, #4]
	ball->velocity=v;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	615a      	str	r2, [r3, #20]
	ball->angle=angle;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800113a:	619a      	str	r2, [r3, #24]
	ball->v_x=ball->velocity*sin((ball->angle*M_PI*2)/360);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f9a5 	bl	8000490 <__aeabi_f2d>
 8001146:	4604      	mov	r4, r0
 8001148:	460d      	mov	r5, r1
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f98c 	bl	800046c <__aeabi_i2d>
 8001154:	a336      	add	r3, pc, #216	; (adr r3, 8001230 <ball_init+0x148>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff f9f1 	bl	8000540 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	f7ff f833 	bl	80001d4 <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <ball_init+0x150>)
 800117c:	f7ff fb0a 	bl	8000794 <__aeabi_ddiv>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	ec43 2b17 	vmov	d7, r2, r3
 8001188:	eeb0 0a47 	vmov.f32	s0, s14
 800118c:	eef0 0a67 	vmov.f32	s1, s15
 8001190:	f002 fe76 	bl	8003e80 <sin>
 8001194:	ec53 2b10 	vmov	r2, r3, d0
 8001198:	4620      	mov	r0, r4
 800119a:	4629      	mov	r1, r5
 800119c:	f7ff f9d0 	bl	8000540 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fca2 	bl	8000af0 <__aeabi_d2f>
 80011ac:	4602      	mov	r2, r0
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]
	ball->v_y=ball->velocity*cos((ball->angle*M_PI*2)/360);
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f96a 	bl	8000490 <__aeabi_f2d>
 80011bc:	4604      	mov	r4, r0
 80011be:	460d      	mov	r5, r1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f951 	bl	800046c <__aeabi_i2d>
 80011ca:	a319      	add	r3, pc, #100	; (adr r3, 8001230 <ball_init+0x148>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff f9b6 	bl	8000540 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4610      	mov	r0, r2
 80011da:	4619      	mov	r1, r3
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	f7fe fff8 	bl	80001d4 <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <ball_init+0x150>)
 80011f2:	f7ff facf 	bl	8000794 <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	ec43 2b17 	vmov	d7, r2, r3
 80011fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001202:	eef0 0a67 	vmov.f32	s1, s15
 8001206:	f002 fde7 	bl	8003dd8 <cos>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	4620      	mov	r0, r4
 8001210:	4629      	mov	r1, r5
 8001212:	f7ff f995 	bl	8000540 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fc67 	bl	8000af0 <__aeabi_d2f>
 8001222:	4602      	mov	r2, r0
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	605a      	str	r2, [r3, #4]
}
 8001228:	bf00      	nop
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bdb0      	pop	{r4, r5, r7, pc}
 8001230:	54442d18 	.word	0x54442d18
 8001234:	400921fb 	.word	0x400921fb
 8001238:	40768000 	.word	0x40768000

0800123c <border_check>:
void border_check(Ball_structTypeDef* ball){
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	if(((ball->y+ball->r)>(SSD1306_LCDHEIGHT-1))||((ball->y-ball->r)<0)){
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	ed93 7a03 	vldr	s14, [r3, #12]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80012fc <border_check+0xc0>
 800125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	dc0f      	bgt.n	8001288 <border_check+0x4c>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a03 	vldr	s14, [r3, #12]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	ee07 3a90 	vmov	s15, r3
 8001276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001286:	d507      	bpl.n	8001298 <border_check+0x5c>
		ball->v_y=ball->v_y*-1;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	edd3 7a01 	vldr	s15, [r3, #4]
 800128e:	eef1 7a67 	vneg.f32	s15, s15
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	if(((ball->x+ball->r)>(SSD1306_LCDWIDTH-1))||(ball->x-ball->r<0)){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	ed93 7a02 	vldr	s14, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001300 <border_check+0xc4>
 80012b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	dc10      	bgt.n	80012de <border_check+0xa2>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	ed93 7a02 	vldr	s14, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012da:	d400      	bmi.n	80012de <border_check+0xa2>
		ball->v_x=ball->v_x*-1;
	}
}
 80012dc:	e007      	b.n	80012ee <border_check+0xb2>
		ball->v_x=ball->v_x*-1;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	eef1 7a67 	vneg.f32	s15, s15
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	edc3 7a00 	vstr	s15, [r3]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	427c0000 	.word	0x427c0000
 8001300:	42fe0000 	.word	0x42fe0000

08001304 <ball_routine>:

void ball_routine(Ball_structTypeDef* ball){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	ball->x+=ball->v_x;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a02 	vstr	s15, [r3, #8]
	ball->y+=ball->v_y;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	ed93 7a03 	vldr	s14, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	edd3 7a01 	vldr	s15, [r3, #4]
 800132e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edc3 7a03 	vstr	s15, [r3, #12]
	border_check(ball);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff7f 	bl	800123c <border_check>
	GFX_DrawFillCircle((int)ball->x,(int)ball->y,ball->r,WHITE);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	edd3 7a02 	vldr	s15, [r3, #8]
 8001344:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	edd3 7a03 	vldr	s15, [r3, #12]
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	b29a      	uxth	r2, r3
 8001358:	2301      	movs	r3, #1
 800135a:	ee17 1a90 	vmov	r1, s15
 800135e:	ee17 0a10 	vmov	r0, s14
 8001362:	f7ff fd5c 	bl	8000e1e <GFX_DrawFillCircle>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <distance_p>:
float distance_p(float x1,float x2,float y1,float y2){
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	ed87 0a03 	vstr	s0, [r7, #12]
 8001378:	edc7 0a02 	vstr	s1, [r7, #8]
 800137c:	ed87 1a01 	vstr	s2, [r7, #4]
 8001380:	edc7 1a00 	vstr	s3, [r7]
	return(sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)));
 8001384:	ed97 7a02 	vldr	s14, [r7, #8]
 8001388:	edd7 7a03 	vldr	s15, [r7, #12]
 800138c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001390:	edd7 6a02 	vldr	s13, [r7, #8]
 8001394:	edd7 7a03 	vldr	s15, [r7, #12]
 8001398:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800139c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a0:	edd7 6a00 	vldr	s13, [r7]
 80013a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013ac:	ed97 6a00 	vldr	s12, [r7]
 80013b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80013b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c0:	ee17 0a90 	vmov	r0, s15
 80013c4:	f7ff f864 	bl	8000490 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	ec43 2b10 	vmov	d0, r2, r3
 80013d0:	f002 fdae 	bl	8003f30 <sqrt>
 80013d4:	ec53 2b10 	vmov	r2, r3, d0
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fb88 	bl	8000af0 <__aeabi_d2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	ee07 3a90 	vmov	s15, r3
}
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <ball_collision>:
void ball_collision(Ball_structTypeDef* ball1 ,Ball_structTypeDef* ball2 ){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	float distance=distance_p(ball1->x,ball2->x,ball1->y,ball2->y);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	ed93 7a02 	vldr	s14, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 6a03 	vldr	s13, [r3, #12]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001412:	eef0 1a46 	vmov.f32	s3, s12
 8001416:	eeb0 1a66 	vmov.f32	s2, s13
 800141a:	eef0 0a47 	vmov.f32	s1, s14
 800141e:	eeb0 0a67 	vmov.f32	s0, s15
 8001422:	f7ff ffa4 	bl	800136e <distance_p>
 8001426:	ed87 0a03 	vstr	s0, [r7, #12]
	if(distance<=(ball1->r+ball2->r)){
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	4413      	add	r3, r2
 8001434:	ee07 3a90 	vmov	s15, r3
 8001438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001448:	d900      	bls.n	800144c <ball_collision+0x5c>
		ball1->v_x=ball1->v_x*-1;
		ball1->v_y=ball1->v_y*-1;
		ball2->v_x=ball2->v_x*-1;
		ball2->v_y=ball2->v_y*-1;
	}
}
 800144a:	e01f      	b.n	800148c <ball_collision+0x9c>
		ball1->v_x=ball1->v_x*-1;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	eef1 7a67 	vneg.f32	s15, s15
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edc3 7a00 	vstr	s15, [r3]
		ball1->v_y=ball1->v_y*-1;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001462:	eef1 7a67 	vneg.f32	s15, s15
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edc3 7a01 	vstr	s15, [r3, #4]
		ball2->v_x=ball2->v_x*-1;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	eef1 7a67 	vneg.f32	s15, s15
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	edc3 7a00 	vstr	s15, [r3]
		ball2->v_y=ball2->v_y*-1;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001482:	eef1 7a67 	vneg.f32	s15, s15
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800148c:	bf00      	nop
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149a:	f000 f9c3 	bl	8001824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149e:	f000 f83f 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a2:	f000 f8d3 	bl	800164c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014a6:	f000 f893 	bl	80015d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <main+0x7c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a18      	ldr	r2, [pc, #96]	; (8001510 <main+0x7c>)
 80014b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <main+0x7c>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  SSD1306_I2cInit(&hi2c1);
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <main+0x80>)
 80014c4:	f7ff fe00 	bl	80010c8 <SSD1306_I2cInit>
  ball_init(&Ball_table[0],5,32,32,4,50);
 80014c8:	2332      	movs	r3, #50	; 0x32
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 80014d0:	2320      	movs	r3, #32
 80014d2:	2220      	movs	r2, #32
 80014d4:	2105      	movs	r1, #5
 80014d6:	4810      	ldr	r0, [pc, #64]	; (8001518 <main+0x84>)
 80014d8:	f7ff fe06 	bl	80010e8 <ball_init>
  ball_init(&Ball_table[1],5,16,16,6,123);
 80014dc:	237b      	movs	r3, #123	; 0x7b
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80014e4:	2310      	movs	r3, #16
 80014e6:	2210      	movs	r2, #16
 80014e8:	2105      	movs	r1, #5
 80014ea:	480c      	ldr	r0, [pc, #48]	; (800151c <main+0x88>)
 80014ec:	f7ff fdfc 	bl	80010e8 <ball_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SSD1306_Clear(BLACK);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff fd5f 	bl	8000fb4 <SSD1306_Clear>
	  ball_collision(&Ball_table[0],&Ball_table[1]);
 80014f6:	4909      	ldr	r1, [pc, #36]	; (800151c <main+0x88>)
 80014f8:	4807      	ldr	r0, [pc, #28]	; (8001518 <main+0x84>)
 80014fa:	f7ff ff79 	bl	80013f0 <ball_collision>
	  ball_routine(&Ball_table[0]);
 80014fe:	4806      	ldr	r0, [pc, #24]	; (8001518 <main+0x84>)
 8001500:	f7ff ff00 	bl	8001304 <ball_routine>
	  ball_routine(&Ball_table[1]);
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <main+0x88>)
 8001506:	f7ff fefd 	bl	8001304 <ball_routine>
	  SSD1306_Display();
 800150a:	f7ff fd71 	bl	8000ff0 <SSD1306_Display>
	  SSD1306_Clear(BLACK);
 800150e:	e7ef      	b.n	80014f0 <main+0x5c>
 8001510:	40021000 	.word	0x40021000
 8001514:	200005d0 	.word	0x200005d0
 8001518:	20000490 	.word	0x20000490
 800151c:	200004b0 	.word	0x200004b0

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b096      	sub	sp, #88	; 0x58
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152a:	2228      	movs	r2, #40	; 0x28
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f002 fc4a 	bl	8003dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001554:	2302      	movs	r3, #2
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	2301      	movs	r3, #1
 800155a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155c:	2310      	movs	r3, #16
 800155e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001560:	2302      	movs	r3, #2
 8001562:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001564:	2300      	movs	r3, #0
 8001566:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001568:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800156c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f8b4 	bl	80026e0 <HAL_RCC_OscConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800157e:	f000 f87d 	bl	800167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001582:	230f      	movs	r3, #15
 8001584:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001586:	2302      	movs	r3, #2
 8001588:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 f8dc 	bl	800375c <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015aa:	f000 f867 	bl	800167c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015ae:	2320      	movs	r3, #32
 80015b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fab5 	bl	8003b28 <HAL_RCCEx_PeriphCLKConfig>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80015c4:	f000 f85a 	bl	800167c <Error_Handler>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3758      	adds	r7, #88	; 0x58
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_I2C1_Init+0x74>)
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <MX_I2C1_Init+0x78>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <MX_I2C1_Init+0x74>)
 80015dc:	f240 220b 	movw	r2, #523	; 0x20b
 80015e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_I2C1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_I2C1_Init+0x74>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <MX_I2C1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015fa:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_I2C1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001600:	4b10      	ldr	r3, [pc, #64]	; (8001644 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_I2C1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_I2C1_Init+0x74>)
 800160e:	f000 fbc7 	bl	8001da0 <HAL_I2C_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001618:	f000 f830 	bl	800167c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <MX_I2C1_Init+0x74>)
 8001620:	f000 ffc6 	bl	80025b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800162a:	f000 f827 	bl	800167c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <MX_I2C1_Init+0x74>)
 8001632:	f001 f808 	bl	8002646 <HAL_I2CEx_ConfigDigitalFilter>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800163c:	f000 f81e 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200005d0 	.word	0x200005d0
 8001648:	40005400 	.word	0x40005400

0800164c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_GPIO_Init+0x2c>)
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <MX_GPIO_Init+0x2c>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6153      	str	r3, [r2, #20]
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <MX_GPIO_Init+0x2c>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_MspInit+0x44>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <HAL_MspInit+0x44>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6193      	str	r3, [r2, #24]
 800169a:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <HAL_MspInit+0x44>)
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <HAL_MspInit+0x44>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_MspInit+0x44>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_MspInit+0x44>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000

080016d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_I2C_MspInit+0x7c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d127      	bne.n	8001742 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_I2C_MspInit+0x80>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_I2C_MspInit+0x80>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_I2C_MspInit+0x80>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170e:	2312      	movs	r3, #18
 8001710:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800171a:	2304      	movs	r3, #4
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <HAL_I2C_MspInit+0x84>)
 8001726:	f000 f9c9 	bl	8001abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_I2C_MspInit+0x80>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_I2C_MspInit+0x80>)
 8001730:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001734:	61d3      	str	r3, [r2, #28]
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_I2C_MspInit+0x80>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40005400 	.word	0x40005400
 8001750:	40021000 	.word	0x40021000
 8001754:	48000400 	.word	0x48000400

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f884 	bl	80018b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <SystemInit+0x20>)
 80017b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <SystemInit+0x20>)
 80017b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001808 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017d4:	f7ff ffea 	bl	80017ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <LoopForever+0x6>)
  ldr r1, =_edata
 80017da:	490d      	ldr	r1, [pc, #52]	; (8001810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <LoopForever+0xe>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f0:	4c0a      	ldr	r4, [pc, #40]	; (800181c <LoopForever+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017fe:	f002 fabf 	bl	8003d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001802:	f7ff fe47 	bl	8001494 <main>

08001806 <LoopForever>:

LoopForever:
    b LoopForever
 8001806:	e7fe      	b.n	8001806 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001808:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800180c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001810:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001814:	08005300 	.word	0x08005300
  ldr r2, =_sbss
 8001818:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800181c:	20000628 	.word	0x20000628

08001820 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001820:	e7fe      	b.n	8001820 <ADC1_2_IRQHandler>
	...

08001824 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_Init+0x28>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_Init+0x28>)
 800182e:	f043 0310 	orr.w	r3, r3, #16
 8001832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001834:	2003      	movs	r0, #3
 8001836:	f000 f90d 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800183a:	200f      	movs	r0, #15
 800183c:	f000 f808 	bl	8001850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001840:	f7ff ff22 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40022000 	.word	0x40022000

08001850 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x54>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_InitTick+0x58>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4619      	mov	r1, r3
 8001862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001866:	fbb3 f3f1 	udiv	r3, r3, r1
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f917 	bl	8001aa2 <HAL_SYSTICK_Config>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b0f      	cmp	r3, #15
 8001882:	d80a      	bhi.n	800189a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001884:	2200      	movs	r2, #0
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f000 f8ed 	bl	8001a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <HAL_InitTick+0x5c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x20>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_IncTick+0x24>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_IncTick+0x24>)
 80018c2:	6013      	str	r3, [r2, #0]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000624 	.word	0x20000624

080018d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return uwTick;  
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <HAL_GetTick+0x14>)
 80018de:	681b      	ldr	r3, [r3, #0]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000624 	.word	0x20000624

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	; (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	6039      	str	r1, [r7, #0]
 800195e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	2b00      	cmp	r3, #0
 8001966:	db0a      	blt.n	800197e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	b2da      	uxtb	r2, r3
 800196c:	490c      	ldr	r1, [pc, #48]	; (80019a0 <__NVIC_SetPriority+0x4c>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	0112      	lsls	r2, r2, #4
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	440b      	add	r3, r1
 8001978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800197c:	e00a      	b.n	8001994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4908      	ldr	r1, [pc, #32]	; (80019a4 <__NVIC_SetPriority+0x50>)
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	3b04      	subs	r3, #4
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	440b      	add	r3, r1
 8001992:	761a      	strb	r2, [r3, #24]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000e100 	.word	0xe000e100
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f1c3 0307 	rsb	r3, r3, #7
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	bf28      	it	cs
 80019c6:	2304      	movcs	r3, #4
 80019c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3304      	adds	r3, #4
 80019ce:	2b06      	cmp	r3, #6
 80019d0:	d902      	bls.n	80019d8 <NVIC_EncodePriority+0x30>
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3b03      	subs	r3, #3
 80019d6:	e000      	b.n	80019da <NVIC_EncodePriority+0x32>
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	f04f 32ff 	mov.w	r2, #4294967295
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43da      	mvns	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	401a      	ands	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	43d9      	mvns	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	4313      	orrs	r3, r2
         );
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3724      	adds	r7, #36	; 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff8e 	bl	8001954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff47 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff5c 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff8e 	bl	80019a8 <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5d 	bl	8001954 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ffb0 	bl	8001a10 <SysTick_Config>
 8001ab0:	4603      	mov	r3, r0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b087      	sub	sp, #28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aca:	e14e      	b.n	8001d6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 8140 	beq.w	8001d64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d005      	beq.n	8001afc <HAL_GPIO_Init+0x40>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d130      	bne.n	8001b5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b32:	2201      	movs	r2, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 0201 	and.w	r2, r3, #1
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d017      	beq.n	8001b9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d123      	bne.n	8001bee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3208      	adds	r2, #8
 8001be8:	6939      	ldr	r1, [r7, #16]
 8001bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0203 	and.w	r2, r3, #3
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 809a 	beq.w	8001d64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <HAL_GPIO_Init+0x2cc>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_GPIO_Init+0x2cc>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b52      	ldr	r3, [pc, #328]	; (8001d88 <HAL_GPIO_Init+0x2cc>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c72:	d013      	beq.n	8001c9c <HAL_GPIO_Init+0x1e0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <HAL_GPIO_Init+0x2d4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00d      	beq.n	8001c98 <HAL_GPIO_Init+0x1dc>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a45      	ldr	r2, [pc, #276]	; (8001d94 <HAL_GPIO_Init+0x2d8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d007      	beq.n	8001c94 <HAL_GPIO_Init+0x1d8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a44      	ldr	r2, [pc, #272]	; (8001d98 <HAL_GPIO_Init+0x2dc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d101      	bne.n	8001c90 <HAL_GPIO_Init+0x1d4>
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e006      	b.n	8001c9e <HAL_GPIO_Init+0x1e2>
 8001c90:	2305      	movs	r3, #5
 8001c92:	e004      	b.n	8001c9e <HAL_GPIO_Init+0x1e2>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e002      	b.n	8001c9e <HAL_GPIO_Init+0x1e2>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <HAL_GPIO_Init+0x1e2>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	f002 0203 	and.w	r2, r2, #3
 8001ca4:	0092      	lsls	r2, r2, #2
 8001ca6:	4093      	lsls	r3, r2
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cae:	4937      	ldr	r1, [pc, #220]	; (8001d8c <HAL_GPIO_Init+0x2d0>)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbc:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ce0:	4a2e      	ldr	r2, [pc, #184]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d10:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_GPIO_Init+0x2e0>)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f47f aea9 	bne.w	8001acc <HAL_GPIO_Init+0x10>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40010000 	.word	0x40010000
 8001d90:	48000400 	.word	0x48000400
 8001d94:	48000800 	.word	0x48000800
 8001d98:	48000c00 	.word	0x48000c00
 8001d9c:	40010400 	.word	0x40010400

08001da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e081      	b.n	8001eb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fc82 	bl	80016d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	; 0x24
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	e006      	b.n	8001e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d104      	bne.n	8001e3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69d9      	ldr	r1, [r3, #28]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4611      	mov	r1, r2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4603      	mov	r3, r0
 8001ed0:	817b      	strh	r3, [r7, #10]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	813b      	strh	r3, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	f040 80f9 	bne.w	80020da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_I2C_Mem_Write+0x34>
 8001eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0ed      	b.n	80020dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Mem_Write+0x4e>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e0e6      	b.n	80020dc <HAL_I2C_Mem_Write+0x21c>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f16:	f7ff fcdf 	bl	80018d8 <HAL_GetTick>
 8001f1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2319      	movs	r3, #25
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f955 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d1      	b.n	80020dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2221      	movs	r2, #33	; 0x21
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a3a      	ldr	r2, [r7, #32]
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f60:	88f8      	ldrh	r0, [r7, #6]
 8001f62:	893a      	ldrh	r2, [r7, #8]
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	4603      	mov	r3, r0
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f8b9 	bl	80020e8 <I2C_RequestMemoryWrite>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0a9      	b.n	80020dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2bff      	cmp	r3, #255	; 0xff
 8001f90:	d90e      	bls.n	8001fb0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	22ff      	movs	r2, #255	; 0xff
 8001f96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	8979      	ldrh	r1, [r7, #10]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 facf 	bl	800254c <I2C_TransferConfig>
 8001fae:	e00f      	b.n	8001fd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	8979      	ldrh	r1, [r7, #10]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fabe 	bl	800254c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f94e 	bl	8002276 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e07b      	b.n	80020dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d034      	beq.n	8002088 <HAL_I2C_Mem_Write+0x1c8>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	2b00      	cmp	r3, #0
 8002024:	d130      	bne.n	8002088 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f8d1 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e04d      	b.n	80020dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d90e      	bls.n	8002068 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	22ff      	movs	r2, #255	; 0xff
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	b2da      	uxtb	r2, r3
 8002056:	8979      	ldrh	r1, [r7, #10]
 8002058:	2300      	movs	r3, #0
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fa73 	bl	800254c <I2C_TransferConfig>
 8002066:	e00f      	b.n	8002088 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	b2da      	uxtb	r2, r3
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	2300      	movs	r3, #0
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fa62 	bl	800254c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d19e      	bne.n	8001fd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f934 	bl	8002304 <I2C_WaitOnSTOPFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e01a      	b.n	80020dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2220      	movs	r2, #32
 80020ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_I2C_Mem_Write+0x224>)
 80020ba:	400b      	ands	r3, r1
 80020bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	fe00e800 	.word	0xfe00e800

080020e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	817b      	strh	r3, [r7, #10]
 80020fa:	460b      	mov	r3, r1
 80020fc:	813b      	strh	r3, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	8979      	ldrh	r1, [r7, #10]
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <I2C_RequestMemoryWrite+0xa4>)
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fa1b 	bl	800254c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	69b9      	ldr	r1, [r7, #24]
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 f8ab 	bl	8002276 <I2C_WaitOnTXISFlagUntilTimeout>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e02c      	b.n	8002184 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002130:	893b      	ldrh	r3, [r7, #8]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
 800213a:	e015      	b.n	8002168 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800213c:	893b      	ldrh	r3, [r7, #8]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	b29b      	uxth	r3, r3
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	69b9      	ldr	r1, [r7, #24]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f891 	bl	8002276 <I2C_WaitOnTXISFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e012      	b.n	8002184 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800215e:	893b      	ldrh	r3, [r7, #8]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2200      	movs	r2, #0
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f830 	bl	80021d8 <I2C_WaitOnFlagUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	80002000 	.word	0x80002000

08002190 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d103      	bne.n	80021ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d007      	beq.n	80021cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	619a      	str	r2, [r3, #24]
  }
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e8:	e031      	b.n	800224e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f0:	d02d      	beq.n	800224e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f2:	f7ff fb71 	bl	80018d8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d302      	bcc.n	8002208 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d122      	bne.n	800224e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	4013      	ands	r3, r2
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	429a      	cmp	r2, r3
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	461a      	mov	r2, r3
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	429a      	cmp	r2, r3
 8002224:	d113      	bne.n	800224e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f043 0220 	orr.w	r2, r3, #32
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	4013      	ands	r3, r2
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	bf0c      	ite	eq
 800225e:	2301      	moveq	r3, #1
 8002260:	2300      	movne	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	429a      	cmp	r2, r3
 800226a:	d0be      	beq.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002282:	e033      	b.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f87f 	bl	800238c <I2C_IsErrorOccurred>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e031      	b.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229e:	d025      	beq.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a0:	f7ff fb1a 	bl	80018d8 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d302      	bcc.n	80022b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11a      	bne.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d013      	beq.n	80022ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	f043 0220 	orr.w	r2, r3, #32
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e007      	b.n	80022fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d1c4      	bne.n	8002284 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002310:	e02f      	b.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f838 	bl	800238c <I2C_IsErrorOccurred>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e02d      	b.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7ff fad7 	bl	80018d8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d11a      	bne.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b20      	cmp	r3, #32
 8002348:	d013      	beq.n	8002372 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f043 0220 	orr.w	r2, r3, #32
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e007      	b.n	8002382 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0320 	and.w	r3, r3, #32
 800237c:	2b20      	cmp	r3, #32
 800237e:	d1c8      	bne.n	8002312 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d068      	beq.n	800248a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2210      	movs	r2, #16
 80023be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023c0:	e049      	b.n	8002456 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d045      	beq.n	8002456 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7ff fa85 	bl	80018d8 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_IsErrorOccurred+0x54>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d13a      	bne.n	8002456 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d121      	bne.n	8002448 <I2C_IsErrorOccurred+0xbc>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800240a:	d01d      	beq.n	8002448 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800240c:	7cfb      	ldrb	r3, [r7, #19]
 800240e:	2b20      	cmp	r3, #32
 8002410:	d01a      	beq.n	8002448 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002420:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002422:	f7ff fa59 	bl	80018d8 <HAL_GetTick>
 8002426:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002428:	e00e      	b.n	8002448 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800242a:	f7ff fa55 	bl	80018d8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b19      	cmp	r3, #25
 8002436:	d907      	bls.n	8002448 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f043 0320 	orr.w	r3, r3, #32
 800243e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002446:	e006      	b.n	8002456 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b20      	cmp	r3, #32
 8002454:	d1e9      	bne.n	800242a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b20      	cmp	r3, #32
 8002462:	d003      	beq.n	800246c <I2C_IsErrorOccurred+0xe0>
 8002464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0aa      	beq.n	80023c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800246c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002470:	2b00      	cmp	r3, #0
 8002472:	d103      	bne.n	800247c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2220      	movs	r2, #32
 800247a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f043 0304 	orr.w	r3, r3, #4
 8002482:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00b      	beq.n	80024b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800249c:	6a3b      	ldr	r3, [r7, #32]
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00b      	beq.n	80024d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00b      	beq.n	80024f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80024f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f7ff fe45 	bl	8002190 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <I2C_IsErrorOccurred+0x1bc>)
 8002512:	400b      	ands	r3, r1
 8002514:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	431a      	orrs	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800253a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800253e:	4618      	mov	r0, r3
 8002540:	3728      	adds	r7, #40	; 0x28
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	fe00e800 	.word	0xfe00e800

0800254c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	817b      	strh	r3, [r7, #10]
 800255a:	4613      	mov	r3, r2
 800255c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002564:	7a7b      	ldrb	r3, [r7, #9]
 8002566:	041b      	lsls	r3, r3, #16
 8002568:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800256c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	4313      	orrs	r3, r2
 8002576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800257a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	0d5b      	lsrs	r3, r3, #21
 8002586:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <I2C_TransferConfig+0x60>)
 800258c:	430b      	orrs	r3, r1
 800258e:	43db      	mvns	r3, r3
 8002590:	ea02 0103 	and.w	r1, r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800259e:	bf00      	nop
 80025a0:	371c      	adds	r7, #28
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	03ff63ff 	.word	0x03ff63ff

080025b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d138      	bne.n	8002638 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025d0:	2302      	movs	r3, #2
 80025d2:	e032      	b.n	800263a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002602:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b20      	cmp	r3, #32
 800265a:	d139      	bne.n	80026d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002666:	2302      	movs	r3, #2
 8002668:	e033      	b.n	80026d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	; 0x24
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002698:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f001 b823 	b.w	800374c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 817d 	beq.w	8002a16 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800271c:	4bbc      	ldr	r3, [pc, #752]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b04      	cmp	r3, #4
 8002726:	d00c      	beq.n	8002742 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002728:	4bb9      	ldr	r3, [pc, #740]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d15c      	bne.n	80027ee <HAL_RCC_OscConfig+0x10e>
 8002734:	4bb6      	ldr	r3, [pc, #728]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d155      	bne.n	80027ee <HAL_RCC_OscConfig+0x10e>
 8002742:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002746:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002756:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d102      	bne.n	8002774 <HAL_RCC_OscConfig+0x94>
 800276e:	4ba8      	ldr	r3, [pc, #672]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	e015      	b.n	80027a0 <HAL_RCC_OscConfig+0xc0>
 8002774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002778:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002790:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800279c:	4b9c      	ldr	r3, [pc, #624]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80027a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80027ac:	fa92 f2a2 	rbit	r2, r2
 80027b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80027b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80027b8:	fab2 f282 	clz	r2, r2
 80027bc:	b2d2      	uxtb	r2, r2
 80027be:	f042 0220 	orr.w	r2, r2, #32
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	f002 021f 	and.w	r2, r2, #31
 80027c8:	2101      	movs	r1, #1
 80027ca:	fa01 f202 	lsl.w	r2, r1, r2
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 811f 	beq.w	8002a14 <HAL_RCC_OscConfig+0x334>
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8116 	bne.w	8002a14 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f000 bfaf 	b.w	800374c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027fe:	d106      	bne.n	800280e <HAL_RCC_OscConfig+0x12e>
 8002800:	4b83      	ldr	r3, [pc, #524]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a82      	ldr	r2, [pc, #520]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	e036      	b.n	800287c <HAL_RCC_OscConfig+0x19c>
 800280e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002812:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x158>
 800281e:	4b7c      	ldr	r3, [pc, #496]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7b      	ldr	r2, [pc, #492]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a78      	ldr	r2, [pc, #480]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e021      	b.n	800287c <HAL_RCC_OscConfig+0x19c>
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x184>
 800284a:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a70      	ldr	r2, [pc, #448]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b6e      	ldr	r3, [pc, #440]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6d      	ldr	r2, [pc, #436]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x19c>
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a69      	ldr	r2, [pc, #420]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800286a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	4b67      	ldr	r3, [pc, #412]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a66      	ldr	r2, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800287a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800287c:	4b64      	ldr	r3, [pc, #400]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	f023 020f 	bic.w	r2, r3, #15
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	495f      	ldr	r1, [pc, #380]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002892:	4313      	orrs	r3, r2
 8002894:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d059      	beq.n	800295a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a6:	f7ff f817 	bl	80018d8 <HAL_GetTick>
 80028aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	e00a      	b.n	80028c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff f812 	bl	80018d8 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b64      	cmp	r3, #100	; 0x64
 80028be:	d902      	bls.n	80028c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	f000 bf43 	b.w	800374c <HAL_RCC_OscConfig+0x106c>
 80028c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80028da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_RCC_OscConfig+0x218>
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	e015      	b.n	8002924 <HAL_RCC_OscConfig+0x244>
 80028f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800290c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002910:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002914:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002928:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800292c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002930:	fa92 f2a2 	rbit	r2, r2
 8002934:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002938:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800293c:	fab2 f282 	clz	r2, r2
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	f042 0220 	orr.w	r2, r2, #32
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f002 021f 	and.w	r2, r2, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ab      	beq.n	80028b0 <HAL_RCC_OscConfig+0x1d0>
 8002958:	e05d      	b.n	8002a16 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe ffbd 	bl	80018d8 <HAL_GetTick>
 800295e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e00a      	b.n	800297a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe ffb8 	bl	80018d8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b64      	cmp	r3, #100	; 0x64
 8002972:	d902      	bls.n	800297a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	f000 bee9 	b.w	800374c <HAL_RCC_OscConfig+0x106c>
 800297a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002982:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800298e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_RCC_OscConfig+0x2cc>
 80029a6:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_OscConfig+0x2f8>
 80029ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80029c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80029c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_RCC_OscConfig+0x330>)
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80029e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80029ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0220 	orr.w	r2, r2, #32
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ab      	bne.n	8002964 <HAL_RCC_OscConfig+0x284>
 8002a0c:	e003      	b.n	8002a16 <HAL_RCC_OscConfig+0x336>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 817d 	beq.w	8002d26 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a2c:	4ba6      	ldr	r3, [pc, #664]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00b      	beq.n	8002a50 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a38:	4ba3      	ldr	r3, [pc, #652]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d172      	bne.n	8002b2a <HAL_RCC_OscConfig+0x44a>
 8002a44:	4ba0      	ldr	r3, [pc, #640]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d16c      	bne.n	8002b2a <HAL_RCC_OscConfig+0x44a>
 8002a50:	2302      	movs	r3, #2
 8002a52:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a62:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	095b      	lsrs	r3, r3, #5
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d102      	bne.n	8002a80 <HAL_RCC_OscConfig+0x3a0>
 8002a7a:	4b93      	ldr	r3, [pc, #588]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	e013      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3c8>
 8002a80:	2302      	movs	r3, #2
 8002a82:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a98:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002aa4:	4b88      	ldr	r3, [pc, #544]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002aae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ab2:	fa92 f2a2 	rbit	r2, r2
 8002ab6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002aba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f042 0220 	orr.w	r2, r2, #32
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f002 021f 	and.w	r2, r2, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCC_OscConfig+0x410>
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f000 be2e 	b.w	800374c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af0:	4b75      	ldr	r3, [pc, #468]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	21f8      	movs	r1, #248	; 0xf8
 8002b06:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b0e:	fa91 f1a1 	rbit	r1, r1
 8002b12:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b16:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b1a:	fab1 f181 	clz	r1, r1
 8002b1e:	b2c9      	uxtb	r1, r1
 8002b20:	408b      	lsls	r3, r1
 8002b22:	4969      	ldr	r1, [pc, #420]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b28:	e0fd      	b.n	8002d26 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8088 	beq.w	8002c4c <HAL_RCC_OscConfig+0x56c>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	461a      	mov	r2, r3
 8002b64:	2301      	movs	r3, #1
 8002b66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe feb6 	bl	80018d8 <HAL_GetTick>
 8002b6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b72:	f7fe feb1 	bl	80018d8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	f000 bde2 	b.w	800374c <HAL_RCC_OscConfig+0x106c>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b9a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d102      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4d8>
 8002bb2:	4b45      	ldr	r3, [pc, #276]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	e013      	b.n	8002be0 <HAL_RCC_OscConfig+0x500>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002bd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2202      	movs	r2, #2
 8002be2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002be6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bea:	fa92 f2a2 	rbit	r2, r2
 8002bee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002bf2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002bf6:	fab2 f282 	clz	r2, r2
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f042 0220 	orr.w	r2, r2, #32
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	f002 021f 	and.w	r2, r2, #31
 8002c06:	2101      	movs	r1, #1
 8002c08:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0af      	beq.n	8002b72 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	21f8      	movs	r1, #248	; 0xf8
 8002c28:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002c30:	fa91 f1a1 	rbit	r1, r1
 8002c34:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c38:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c3c:	fab1 f181 	clz	r1, r1
 8002c40:	b2c9      	uxtb	r1, r1
 8002c42:	408b      	lsls	r3, r1
 8002c44:	4920      	ldr	r1, [pc, #128]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
 8002c4a:	e06c      	b.n	8002d26 <HAL_RCC_OscConfig+0x646>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	461a      	mov	r2, r3
 8002c74:	2300      	movs	r3, #0
 8002c76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c78:	f7fe fe2e 	bl	80018d8 <HAL_GetTick>
 8002c7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c82:	f7fe fe29 	bl	80018d8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	f000 bd5a 	b.w	800374c <HAL_RCC_OscConfig+0x106c>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ca2:	fa93 f3a3 	rbit	r3, r3
 8002ca6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002caa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cae:	fab3 f383 	clz	r3, r3
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	095b      	lsrs	r3, r3, #5
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d104      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5ec>
 8002cc2:	4b01      	ldr	r3, [pc, #4]	; (8002cc8 <HAL_RCC_OscConfig+0x5e8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e015      	b.n	8002cf4 <HAL_RCC_OscConfig+0x614>
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ce4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ce8:	fa93 f3a3 	rbit	r3, r3
 8002cec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002cf0:	4bc8      	ldr	r3, [pc, #800]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002cfa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002cfe:	fa92 f2a2 	rbit	r2, r2
 8002d02:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d06:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d0a:	fab2 f282 	clz	r2, r2
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f042 0220 	orr.w	r2, r2, #32
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	f002 021f 	and.w	r2, r2, #31
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ad      	bne.n	8002c82 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8110 	beq.w	8002f5c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d079      	beq.n	8002e40 <HAL_RCC_OscConfig+0x760>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d62:	fab3 f383 	clz	r3, r3
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4bab      	ldr	r3, [pc, #684]	; (8003018 <HAL_RCC_OscConfig+0x938>)
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	461a      	mov	r2, r3
 8002d72:	2301      	movs	r3, #1
 8002d74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7fe fdaf 	bl	80018d8 <HAL_GetTick>
 8002d7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e00a      	b.n	8002d96 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fe fdaa 	bl	80018d8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d902      	bls.n	8002d96 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	f000 bcdb 	b.w	800374c <HAL_RCC_OscConfig+0x106c>
 8002d96:	2302      	movs	r3, #2
 8002d98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002db0:	2202      	movs	r2, #2
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	fa93 f2a3 	rbit	r2, r3
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	fa93 f2a3 	rbit	r2, r3
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df0:	4b88      	ldr	r3, [pc, #544]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 8002df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	6019      	str	r1, [r3, #0]
 8002e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	fa93 f1a3 	rbit	r1, r3
 8002e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e16:	6019      	str	r1, [r3, #0]
  return result;
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	2101      	movs	r1, #1
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0a0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x6a0>
 8002e3e:	e08d      	b.n	8002f5c <HAL_RCC_OscConfig+0x87c>
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	fa93 f2a3 	rbit	r2, r3
 8002e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e62:	601a      	str	r2, [r3, #0]
  return result;
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e6c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b68      	ldr	r3, [pc, #416]	; (8003018 <HAL_RCC_OscConfig+0x938>)
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fd29 	bl	80018d8 <HAL_GetTick>
 8002e86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fd24 	bl	80018d8 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d902      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f000 bc55 	b.w	800374c <HAL_RCC_OscConfig+0x106c>
 8002ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002eaa:	2202      	movs	r2, #2
 8002eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	fa93 f2a3 	rbit	r2, r3
 8002ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ece:	2202      	movs	r2, #2
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	fa93 f2a3 	rbit	r2, r3
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	fa93 f2a3 	rbit	r2, r3
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0e:	4b41      	ldr	r3, [pc, #260]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 8002f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	6019      	str	r1, [r3, #0]
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f1a3 	rbit	r1, r3
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f34:	6019      	str	r1, [r3, #0]
  return result;
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	fab3 f383 	clz	r3, r3
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d197      	bne.n	8002e8c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 81a1 	beq.w	80032b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f78:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d116      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	4a22      	ldr	r2, [pc, #136]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 8002f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	61d3      	str	r3, [r2, #28]
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002faa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b1a      	ldr	r3, [pc, #104]	; (800301c <HAL_RCC_OscConfig+0x93c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11a      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b17      	ldr	r3, [pc, #92]	; (800301c <HAL_RCC_OscConfig+0x93c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a16      	ldr	r2, [pc, #88]	; (800301c <HAL_RCC_OscConfig+0x93c>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fc85 	bl	80018d8 <HAL_GetTick>
 8002fce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd2:	e009      	b.n	8002fe8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fd4:	f7fe fc80 	bl	80018d8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b64      	cmp	r3, #100	; 0x64
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e3b1      	b.n	800374c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	4b0c      	ldr	r3, [pc, #48]	; (800301c <HAL_RCC_OscConfig+0x93c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10d      	bne.n	8003020 <HAL_RCC_OscConfig+0x940>
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a02      	ldr	r2, [pc, #8]	; (8003014 <HAL_RCC_OscConfig+0x934>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e03c      	b.n	800308c <HAL_RCC_OscConfig+0x9ac>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	10908120 	.word	0x10908120
 800301c:	40007000 	.word	0x40007000
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10c      	bne.n	800304a <HAL_RCC_OscConfig+0x96a>
 8003030:	4bc1      	ldr	r3, [pc, #772]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4ac0      	ldr	r2, [pc, #768]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6213      	str	r3, [r2, #32]
 800303c:	4bbe      	ldr	r3, [pc, #760]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4abd      	ldr	r2, [pc, #756]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003042:	f023 0304 	bic.w	r3, r3, #4
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	e020      	b.n	800308c <HAL_RCC_OscConfig+0x9ac>
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b05      	cmp	r3, #5
 8003058:	d10c      	bne.n	8003074 <HAL_RCC_OscConfig+0x994>
 800305a:	4bb7      	ldr	r3, [pc, #732]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4ab6      	ldr	r2, [pc, #728]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	6213      	str	r3, [r2, #32]
 8003066:	4bb4      	ldr	r3, [pc, #720]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	4ab3      	ldr	r2, [pc, #716]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6213      	str	r3, [r2, #32]
 8003072:	e00b      	b.n	800308c <HAL_RCC_OscConfig+0x9ac>
 8003074:	4bb0      	ldr	r3, [pc, #704]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4aaf      	ldr	r2, [pc, #700]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	4bad      	ldr	r3, [pc, #692]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4aac      	ldr	r2, [pc, #688]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003086:	f023 0304 	bic.w	r3, r3, #4
 800308a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8081 	beq.w	80031a0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7fe fc1b 	bl	80018d8 <HAL_GetTick>
 80030a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a8:	f7fe fc16 	bl	80018d8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e345      	b.n	800374c <HAL_RCC_OscConfig+0x106c>
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fa93 f2a3 	rbit	r2, r3
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030ec:	2202      	movs	r2, #2
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	fa93 f2a3 	rbit	r2, r3
 80030fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003102:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003106:	601a      	str	r2, [r3, #0]
  return result;
 8003108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003110:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	fab3 f383 	clz	r3, r3
 8003116:	b2db      	uxtb	r3, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	b2db      	uxtb	r3, r3
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d102      	bne.n	800312c <HAL_RCC_OscConfig+0xa4c>
 8003126:	4b84      	ldr	r3, [pc, #528]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	e013      	b.n	8003154 <HAL_RCC_OscConfig+0xa74>
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003134:	2202      	movs	r2, #2
 8003136:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	4b79      	ldr	r3, [pc, #484]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003158:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800315c:	2102      	movs	r1, #2
 800315e:	6011      	str	r1, [r2, #0]
 8003160:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003164:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003168:	6812      	ldr	r2, [r2, #0]
 800316a:	fa92 f1a2 	rbit	r1, r2
 800316e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003172:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003176:	6011      	str	r1, [r2, #0]
  return result;
 8003178:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800317c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	fab2 f282 	clz	r2, r2
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	f002 021f 	and.w	r2, r2, #31
 8003192:	2101      	movs	r1, #1
 8003194:	fa01 f202 	lsl.w	r2, r1, r2
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d084      	beq.n	80030a8 <HAL_RCC_OscConfig+0x9c8>
 800319e:	e07f      	b.n	80032a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a0:	f7fe fb9a 	bl	80018d8 <HAL_GetTick>
 80031a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	e00b      	b.n	80031c2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe fb95 	bl	80018d8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e2c4      	b.n	800374c <HAL_RCC_OscConfig+0x106c>
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031ca:	2202      	movs	r2, #2
 80031cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	fa93 f2a3 	rbit	r2, r3
 80031dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031ee:	2202      	movs	r2, #2
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	fa93 f2a3 	rbit	r2, r3
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003208:	601a      	str	r2, [r3, #0]
  return result;
 800320a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003212:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	b2db      	uxtb	r3, r3
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d102      	bne.n	800322e <HAL_RCC_OscConfig+0xb4e>
 8003228:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	e013      	b.n	8003256 <HAL_RCC_OscConfig+0xb76>
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003236:	2202      	movs	r2, #2
 8003238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800323e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	fa93 f2a3 	rbit	r2, r3
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800325a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800325e:	2102      	movs	r1, #2
 8003260:	6011      	str	r1, [r2, #0]
 8003262:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003266:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	fa92 f1a2 	rbit	r1, r2
 8003270:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003274:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003278:	6011      	str	r1, [r2, #0]
  return result;
 800327a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800327e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	fab2 f282 	clz	r2, r2
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	f002 021f 	and.w	r2, r2, #31
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f202 	lsl.w	r2, r1, r2
 800329a:	4013      	ands	r3, r2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d184      	bne.n	80031aa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a22      	ldr	r2, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 80032ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8242 	beq.w	800374a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c6:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_RCC_OscConfig+0xc58>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	f000 8213 	beq.w	80036fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	f040 8162 	bne.w	80035aa <HAL_RCC_OscConfig+0xeca>
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	fa93 f2a3 	rbit	r2, r3
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800330a:	601a      	str	r2, [r3, #0]
  return result;
 800330c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003310:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003314:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003320:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	2300      	movs	r3, #0
 800332a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fad4 	bl	80018d8 <HAL_GetTick>
 8003330:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003334:	e00c      	b.n	8003350 <HAL_RCC_OscConfig+0xc70>
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fe facc 	bl	80018d8 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1fd      	b.n	800374c <HAL_RCC_OscConfig+0x106c>
 8003350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003354:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003358:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003362:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fa93 f2a3 	rbit	r2, r3
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003374:	601a      	str	r2, [r3, #0]
  return result;
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800337e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003380:	fab3 f383 	clz	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d102      	bne.n	800339a <HAL_RCC_OscConfig+0xcba>
 8003394:	4bb0      	ldr	r3, [pc, #704]	; (8003658 <HAL_RCC_OscConfig+0xf78>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	e027      	b.n	80033ea <HAL_RCC_OscConfig+0xd0a>
 800339a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	4b9c      	ldr	r3, [pc, #624]	; (8003658 <HAL_RCC_OscConfig+0xf78>)
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033f2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033f6:	6011      	str	r1, [r2, #0]
 80033f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033fc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	fa92 f1a2 	rbit	r1, r2
 8003406:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800340e:	6011      	str	r1, [r2, #0]
  return result;
 8003410:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003414:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	fab2 f282 	clz	r2, r2
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f002 021f 	and.w	r2, r2, #31
 800342a:	2101      	movs	r1, #1
 800342c:	fa01 f202 	lsl.w	r2, r1, r2
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d182      	bne.n	800333c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003436:	4b88      	ldr	r3, [pc, #544]	; (8003658 <HAL_RCC_OscConfig+0xf78>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	430b      	orrs	r3, r1
 8003458:	497f      	ldr	r1, [pc, #508]	; (8003658 <HAL_RCC_OscConfig+0xf78>)
 800345a:	4313      	orrs	r3, r2
 800345c:	604b      	str	r3, [r1, #4]
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003466:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800346a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003470:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003482:	601a      	str	r2, [r3, #0]
  return result;
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800348c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003498:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	461a      	mov	r2, r3
 80034a0:	2301      	movs	r3, #1
 80034a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fa18 	bl	80018d8 <HAL_GetTick>
 80034a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ac:	e009      	b.n	80034c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fa13 	bl	80018d8 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e144      	b.n	800374c <HAL_RCC_OscConfig+0x106c>
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034e6:	601a      	str	r2, [r3, #0]
  return result;
 80034e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_RCC_OscConfig+0xe2c>
 8003506:	4b54      	ldr	r3, [pc, #336]	; (8003658 <HAL_RCC_OscConfig+0xf78>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e027      	b.n	800355c <HAL_RCC_OscConfig+0xe7c>
 800350c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003510:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	fa93 f2a3 	rbit	r2, r3
 8003528:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800353a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	fa93 f2a3 	rbit	r2, r3
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_OscConfig+0xf78>)
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003560:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003564:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003568:	6011      	str	r1, [r2, #0]
 800356a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800356e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	fa92 f1a2 	rbit	r1, r2
 8003578:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800357c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003580:	6011      	str	r1, [r2, #0]
  return result;
 8003582:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003586:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	fab2 f282 	clz	r2, r2
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	f042 0220 	orr.w	r2, r2, #32
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	f002 021f 	and.w	r2, r2, #31
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f202 	lsl.w	r2, r1, r2
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d082      	beq.n	80034ae <HAL_RCC_OscConfig+0xdce>
 80035a8:	e0cf      	b.n	800374a <HAL_RCC_OscConfig+0x106a>
 80035aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	fa93 f2a3 	rbit	r2, r3
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035ce:	601a      	str	r2, [r3, #0]
  return result;
 80035d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	461a      	mov	r2, r3
 80035ec:	2300      	movs	r3, #0
 80035ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe f972 	bl	80018d8 <HAL_GetTick>
 80035f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f8:	e009      	b.n	800360e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035fa:	f7fe f96d 	bl	80018d8 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b02      	cmp	r3, #2
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e09e      	b.n	800374c <HAL_RCC_OscConfig+0x106c>
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800361a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	fa93 f2a3 	rbit	r2, r3
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003632:	601a      	str	r2, [r3, #0]
  return result;
 8003634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003638:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800363c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800363e:	fab3 f383 	clz	r3, r3
 8003642:	b2db      	uxtb	r3, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	b2db      	uxtb	r3, r3
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b01      	cmp	r3, #1
 8003650:	d104      	bne.n	800365c <HAL_RCC_OscConfig+0xf7c>
 8003652:	4b01      	ldr	r3, [pc, #4]	; (8003658 <HAL_RCC_OscConfig+0xf78>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	e029      	b.n	80036ac <HAL_RCC_OscConfig+0xfcc>
 8003658:	40021000 	.word	0x40021000
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003664:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	fa93 f2a3 	rbit	r2, r3
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800368a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	fa93 f2a3 	rbit	r2, r3
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_OscConfig+0x1078>)
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036be:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	fa92 f1a2 	rbit	r1, r2
 80036c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036cc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036d0:	6011      	str	r1, [r2, #0]
  return result;
 80036d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036d6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	fab2 f282 	clz	r2, r2
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f042 0220 	orr.w	r2, r2, #32
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f002 021f 	and.w	r2, r2, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d180      	bne.n	80035fa <HAL_RCC_OscConfig+0xf1a>
 80036f8:	e027      	b.n	800374a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e01e      	b.n	800374c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800370e:	4b12      	ldr	r3, [pc, #72]	; (8003758 <HAL_RCC_OscConfig+0x1078>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003716:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800371a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	429a      	cmp	r2, r3
 800372c:	d10b      	bne.n	8003746 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800372e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003742:	429a      	cmp	r2, r3
 8003744:	d001      	beq.n	800374a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000

0800375c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b09e      	sub	sp, #120	; 0x78
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e162      	b.n	8003a3a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003774:	4b90      	ldr	r3, [pc, #576]	; (80039b8 <HAL_RCC_ClockConfig+0x25c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d910      	bls.n	80037a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003782:	4b8d      	ldr	r3, [pc, #564]	; (80039b8 <HAL_RCC_ClockConfig+0x25c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 0207 	bic.w	r2, r3, #7
 800378a:	498b      	ldr	r1, [pc, #556]	; (80039b8 <HAL_RCC_ClockConfig+0x25c>)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	4313      	orrs	r3, r2
 8003790:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b89      	ldr	r3, [pc, #548]	; (80039b8 <HAL_RCC_ClockConfig+0x25c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e14a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d008      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b0:	4b82      	ldr	r3, [pc, #520]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	497f      	ldr	r1, [pc, #508]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80dc 	beq.w	8003988 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d13c      	bne.n	8003852 <HAL_RCC_ClockConfig+0xf6>
 80037d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d102      	bne.n	8003802 <HAL_RCC_ClockConfig+0xa6>
 80037fc:	4b6f      	ldr	r3, [pc, #444]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	e00f      	b.n	8003822 <HAL_RCC_ClockConfig+0xc6>
 8003802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003806:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800380a:	fa93 f3a3 	rbit	r3, r3
 800380e:	667b      	str	r3, [r7, #100]	; 0x64
 8003810:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003814:	663b      	str	r3, [r7, #96]	; 0x60
 8003816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003818:	fa93 f3a3 	rbit	r3, r3
 800381c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800381e:	4b67      	ldr	r3, [pc, #412]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003826:	65ba      	str	r2, [r7, #88]	; 0x58
 8003828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800382a:	fa92 f2a2 	rbit	r2, r2
 800382e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003830:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003832:	fab2 f282 	clz	r2, r2
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	f042 0220 	orr.w	r2, r2, #32
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	f002 021f 	and.w	r2, r2, #31
 8003842:	2101      	movs	r1, #1
 8003844:	fa01 f202 	lsl.w	r2, r1, r2
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d17b      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e0f3      	b.n	8003a3a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d13c      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x178>
 800385a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800385e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800386a:	fab3 f383 	clz	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b01      	cmp	r3, #1
 800387c:	d102      	bne.n	8003884 <HAL_RCC_ClockConfig+0x128>
 800387e:	4b4f      	ldr	r3, [pc, #316]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	e00f      	b.n	80038a4 <HAL_RCC_ClockConfig+0x148>
 8003884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	647b      	str	r3, [r7, #68]	; 0x44
 8003892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
 8003898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a0:	4b46      	ldr	r3, [pc, #280]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80038aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ac:	fa92 f2a2 	rbit	r2, r2
 80038b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80038b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b4:	fab2 f282 	clz	r2, r2
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f042 0220 	orr.w	r2, r2, #32
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f002 021f 	and.w	r2, r2, #31
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d13a      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b2      	b.n	8003a3a <HAL_RCC_ClockConfig+0x2de>
 80038d4:	2302      	movs	r3, #2
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_RCC_ClockConfig+0x1a0>
 80038f6:	4b31      	ldr	r3, [pc, #196]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e00d      	b.n	8003918 <HAL_RCC_ClockConfig+0x1bc>
 80038fc:	2302      	movs	r3, #2
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	fa93 f3a3 	rbit	r3, r3
 8003906:	627b      	str	r3, [r7, #36]	; 0x24
 8003908:	2302      	movs	r3, #2
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	4b29      	ldr	r3, [pc, #164]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2202      	movs	r2, #2
 800391a:	61ba      	str	r2, [r7, #24]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	fa92 f2a2 	rbit	r2, r2
 8003922:	617a      	str	r2, [r7, #20]
  return result;
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	fab2 f282 	clz	r2, r2
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	f042 0220 	orr.w	r2, r2, #32
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	f002 021f 	and.w	r2, r2, #31
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f202 	lsl.w	r2, r1, r2
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e079      	b.n	8003a3a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	491a      	ldr	r1, [pc, #104]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fd ffbe 	bl	80018d8 <HAL_GetTick>
 800395c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fd ffba 	bl	80018d8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e061      	b.n	8003a3a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_RCC_ClockConfig+0x260>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_ClockConfig+0x25c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d214      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_RCC_ClockConfig+0x25c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 0207 	bic.w	r2, r3, #7
 800399e:	4906      	ldr	r1, [pc, #24]	; (80039b8 <HAL_RCC_ClockConfig+0x25c>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b04      	ldr	r3, [pc, #16]	; (80039b8 <HAL_RCC_ClockConfig+0x25c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d005      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e040      	b.n	8003a3a <HAL_RCC_ClockConfig+0x2de>
 80039b8:	40022000 	.word	0x40022000
 80039bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039cc:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCC_ClockConfig+0x2e8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	491a      	ldr	r1, [pc, #104]	; (8003a44 <HAL_RCC_ClockConfig+0x2e8>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_RCC_ClockConfig+0x2e8>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4912      	ldr	r1, [pc, #72]	; (8003a44 <HAL_RCC_ClockConfig+0x2e8>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039fe:	f000 f829 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8003a02:	4601      	mov	r1, r0
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_RCC_ClockConfig+0x2e8>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a0c:	22f0      	movs	r2, #240	; 0xf0
 8003a0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	fa92 f2a2 	rbit	r2, r2
 8003a16:	60fa      	str	r2, [r7, #12]
  return result;
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	fab2 f282 	clz	r2, r2
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	40d3      	lsrs	r3, r2
 8003a22:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x2ec>)
 8003a24:	5cd3      	ldrb	r3, [r2, r3]
 8003a26:	fa21 f303 	lsr.w	r3, r1, r3
 8003a2a:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <HAL_RCC_ClockConfig+0x2f0>)
 8003a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_RCC_ClockConfig+0x2f4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fd ff0c 	bl	8001850 <HAL_InitTick>
  
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3778      	adds	r7, #120	; 0x78
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	080050f0 	.word	0x080050f0
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	20000004 	.word	0x20000004

08003a54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b08b      	sub	sp, #44	; 0x2c
 8003a58:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61bb      	str	r3, [r7, #24]
 8003a62:	2300      	movs	r3, #0
 8003a64:	627b      	str	r3, [r7, #36]	; 0x24
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a6e:	4b29      	ldr	r3, [pc, #164]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d002      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x30>
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d003      	beq.n	8003a8a <HAL_RCC_GetSysClockFreq+0x36>
 8003a82:	e03c      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a86:	623b      	str	r3, [r7, #32]
      break;
 8003a88:	e03c      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a90:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a94:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	fa92 f2a2 	rbit	r2, r2
 8003a9c:	607a      	str	r2, [r7, #4]
  return result;
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	fab2 f282 	clz	r2, r2
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	40d3      	lsrs	r3, r2
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003aaa:	5cd3      	ldrb	r3, [r2, r3]
 8003aac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003aae:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	fa92 f2a2 	rbit	r2, r2
 8003ac0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	fab2 f282 	clz	r2, r2
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	40d3      	lsrs	r3, r2
 8003acc:	4a14      	ldr	r2, [pc, #80]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003ace:	5cd3      	ldrb	r3, [r2, r3]
 8003ad0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003adc:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
 8003aec:	e004      	b.n	8003af8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	4a0c      	ldr	r2, [pc, #48]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	623b      	str	r3, [r7, #32]
      break;
 8003afc:	e002      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b00:	623b      	str	r3, [r7, #32]
      break;
 8003b02:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	372c      	adds	r7, #44	; 0x2c
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	007a1200 	.word	0x007a1200
 8003b1c:	08005100 	.word	0x08005100
 8003b20:	08005110 	.word	0x08005110
 8003b24:	003d0900 	.word	0x003d0900

08003b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b092      	sub	sp, #72	; 0x48
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 80cd 	beq.w	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4c:	4b86      	ldr	r3, [pc, #536]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10e      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b58:	4b83      	ldr	r3, [pc, #524]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	4a82      	ldr	r2, [pc, #520]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b62:	61d3      	str	r3, [r2, #28]
 8003b64:	4b80      	ldr	r3, [pc, #512]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	4b7d      	ldr	r3, [pc, #500]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b82:	4b7a      	ldr	r3, [pc, #488]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a79      	ldr	r2, [pc, #484]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd fea3 	bl	80018d8 <HAL_GetTick>
 8003b92:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fd fe9f 	bl	80018d8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	; 0x64
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0db      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b70      	ldr	r3, [pc, #448]	; (8003d6c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bb4:	4b6c      	ldr	r3, [pc, #432]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d07d      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d076      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd2:	4b65      	ldr	r3, [pc, #404]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003be0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	fa93 f3a3 	rbit	r3, r3
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4b5e      	ldr	r3, [pc, #376]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	461a      	mov	r2, r3
 8003c20:	2300      	movs	r3, #0
 8003c22:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c24:	4a50      	ldr	r2, [pc, #320]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c28:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d045      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd fe50 	bl	80018d8 <HAL_GetTick>
 8003c38:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fe4c 	bl	80018d8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e086      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003c52:	2302      	movs	r3, #2
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	fa93 f3a3 	rbit	r3, r3
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5e:	2302      	movs	r3, #2
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	fa93 f3a3 	rbit	r3, r3
 8003c68:	61fb      	str	r3, [r7, #28]
  return result;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f043 0302 	orr.w	r3, r3, #2
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d102      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c80:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	e007      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c86:	2302      	movs	r3, #2
 8003c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	2202      	movs	r2, #2
 8003c98:	613a      	str	r2, [r7, #16]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	fa92 f2a2 	rbit	r2, r2
 8003ca0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	fab2 f282 	clz	r2, r2
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f002 021f 	and.w	r2, r2, #31
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0bd      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003cc0:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4926      	ldr	r1, [pc, #152]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cda:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cf2:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f023 0203 	bic.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	491a      	ldr	r1, [pc, #104]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d10:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	f023 0210 	bic.w	r2, r3, #16
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4912      	ldr	r1, [pc, #72]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	490b      	ldr	r1, [pc, #44]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	4903      	ldr	r1, [pc, #12]	; (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3748      	adds	r7, #72	; 0x48
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	10908100 	.word	0x10908100

08003d74 <__errno>:
 8003d74:	4b01      	ldr	r3, [pc, #4]	; (8003d7c <__errno+0x8>)
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	2000000c 	.word	0x2000000c

08003d80 <__libc_init_array>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	4d0d      	ldr	r5, [pc, #52]	; (8003db8 <__libc_init_array+0x38>)
 8003d84:	4c0d      	ldr	r4, [pc, #52]	; (8003dbc <__libc_init_array+0x3c>)
 8003d86:	1b64      	subs	r4, r4, r5
 8003d88:	10a4      	asrs	r4, r4, #2
 8003d8a:	2600      	movs	r6, #0
 8003d8c:	42a6      	cmp	r6, r4
 8003d8e:	d109      	bne.n	8003da4 <__libc_init_array+0x24>
 8003d90:	4d0b      	ldr	r5, [pc, #44]	; (8003dc0 <__libc_init_array+0x40>)
 8003d92:	4c0c      	ldr	r4, [pc, #48]	; (8003dc4 <__libc_init_array+0x44>)
 8003d94:	f001 f99e 	bl	80050d4 <_init>
 8003d98:	1b64      	subs	r4, r4, r5
 8003d9a:	10a4      	asrs	r4, r4, #2
 8003d9c:	2600      	movs	r6, #0
 8003d9e:	42a6      	cmp	r6, r4
 8003da0:	d105      	bne.n	8003dae <__libc_init_array+0x2e>
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da8:	4798      	blx	r3
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7ee      	b.n	8003d8c <__libc_init_array+0xc>
 8003dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db2:	4798      	blx	r3
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7f2      	b.n	8003d9e <__libc_init_array+0x1e>
 8003db8:	080052f8 	.word	0x080052f8
 8003dbc:	080052f8 	.word	0x080052f8
 8003dc0:	080052f8 	.word	0x080052f8
 8003dc4:	080052fc 	.word	0x080052fc

08003dc8 <memset>:
 8003dc8:	4402      	add	r2, r0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <memset+0xa>
 8003dd0:	4770      	bx	lr
 8003dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd6:	e7f9      	b.n	8003dcc <memset+0x4>

08003dd8 <cos>:
 8003dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003dda:	ec53 2b10 	vmov	r2, r3, d0
 8003dde:	4826      	ldr	r0, [pc, #152]	; (8003e78 <cos+0xa0>)
 8003de0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003de4:	4281      	cmp	r1, r0
 8003de6:	dc06      	bgt.n	8003df6 <cos+0x1e>
 8003de8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003e70 <cos+0x98>
 8003dec:	b005      	add	sp, #20
 8003dee:	f85d eb04 	ldr.w	lr, [sp], #4
 8003df2:	f000 bb89 	b.w	8004508 <__kernel_cos>
 8003df6:	4821      	ldr	r0, [pc, #132]	; (8003e7c <cos+0xa4>)
 8003df8:	4281      	cmp	r1, r0
 8003dfa:	dd09      	ble.n	8003e10 <cos+0x38>
 8003dfc:	ee10 0a10 	vmov	r0, s0
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7fc f9e5 	bl	80001d0 <__aeabi_dsub>
 8003e06:	ec41 0b10 	vmov	d0, r0, r1
 8003e0a:	b005      	add	sp, #20
 8003e0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e10:	4668      	mov	r0, sp
 8003e12:	f000 f8b9 	bl	8003f88 <__ieee754_rem_pio2>
 8003e16:	f000 0003 	and.w	r0, r0, #3
 8003e1a:	2801      	cmp	r0, #1
 8003e1c:	d00b      	beq.n	8003e36 <cos+0x5e>
 8003e1e:	2802      	cmp	r0, #2
 8003e20:	d016      	beq.n	8003e50 <cos+0x78>
 8003e22:	b9e0      	cbnz	r0, 8003e5e <cos+0x86>
 8003e24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003e28:	ed9d 0b00 	vldr	d0, [sp]
 8003e2c:	f000 fb6c 	bl	8004508 <__kernel_cos>
 8003e30:	ec51 0b10 	vmov	r0, r1, d0
 8003e34:	e7e7      	b.n	8003e06 <cos+0x2e>
 8003e36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003e3a:	ed9d 0b00 	vldr	d0, [sp]
 8003e3e:	f000 ff7b 	bl	8004d38 <__kernel_sin>
 8003e42:	ec53 2b10 	vmov	r2, r3, d0
 8003e46:	ee10 0a10 	vmov	r0, s0
 8003e4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003e4e:	e7da      	b.n	8003e06 <cos+0x2e>
 8003e50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003e54:	ed9d 0b00 	vldr	d0, [sp]
 8003e58:	f000 fb56 	bl	8004508 <__kernel_cos>
 8003e5c:	e7f1      	b.n	8003e42 <cos+0x6a>
 8003e5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003e62:	ed9d 0b00 	vldr	d0, [sp]
 8003e66:	2001      	movs	r0, #1
 8003e68:	f000 ff66 	bl	8004d38 <__kernel_sin>
 8003e6c:	e7e0      	b.n	8003e30 <cos+0x58>
 8003e6e:	bf00      	nop
	...
 8003e78:	3fe921fb 	.word	0x3fe921fb
 8003e7c:	7fefffff 	.word	0x7fefffff

08003e80 <sin>:
 8003e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003e82:	ec53 2b10 	vmov	r2, r3, d0
 8003e86:	4828      	ldr	r0, [pc, #160]	; (8003f28 <sin+0xa8>)
 8003e88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e8c:	4281      	cmp	r1, r0
 8003e8e:	dc07      	bgt.n	8003ea0 <sin+0x20>
 8003e90:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003f20 <sin+0xa0>
 8003e94:	2000      	movs	r0, #0
 8003e96:	b005      	add	sp, #20
 8003e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e9c:	f000 bf4c 	b.w	8004d38 <__kernel_sin>
 8003ea0:	4822      	ldr	r0, [pc, #136]	; (8003f2c <sin+0xac>)
 8003ea2:	4281      	cmp	r1, r0
 8003ea4:	dd09      	ble.n	8003eba <sin+0x3a>
 8003ea6:	ee10 0a10 	vmov	r0, s0
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fc f990 	bl	80001d0 <__aeabi_dsub>
 8003eb0:	ec41 0b10 	vmov	d0, r0, r1
 8003eb4:	b005      	add	sp, #20
 8003eb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003eba:	4668      	mov	r0, sp
 8003ebc:	f000 f864 	bl	8003f88 <__ieee754_rem_pio2>
 8003ec0:	f000 0003 	and.w	r0, r0, #3
 8003ec4:	2801      	cmp	r0, #1
 8003ec6:	d00c      	beq.n	8003ee2 <sin+0x62>
 8003ec8:	2802      	cmp	r0, #2
 8003eca:	d011      	beq.n	8003ef0 <sin+0x70>
 8003ecc:	b9f0      	cbnz	r0, 8003f0c <sin+0x8c>
 8003ece:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ed2:	ed9d 0b00 	vldr	d0, [sp]
 8003ed6:	2001      	movs	r0, #1
 8003ed8:	f000 ff2e 	bl	8004d38 <__kernel_sin>
 8003edc:	ec51 0b10 	vmov	r0, r1, d0
 8003ee0:	e7e6      	b.n	8003eb0 <sin+0x30>
 8003ee2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ee6:	ed9d 0b00 	vldr	d0, [sp]
 8003eea:	f000 fb0d 	bl	8004508 <__kernel_cos>
 8003eee:	e7f5      	b.n	8003edc <sin+0x5c>
 8003ef0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ef4:	ed9d 0b00 	vldr	d0, [sp]
 8003ef8:	2001      	movs	r0, #1
 8003efa:	f000 ff1d 	bl	8004d38 <__kernel_sin>
 8003efe:	ec53 2b10 	vmov	r2, r3, d0
 8003f02:	ee10 0a10 	vmov	r0, s0
 8003f06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003f0a:	e7d1      	b.n	8003eb0 <sin+0x30>
 8003f0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f10:	ed9d 0b00 	vldr	d0, [sp]
 8003f14:	f000 faf8 	bl	8004508 <__kernel_cos>
 8003f18:	e7f1      	b.n	8003efe <sin+0x7e>
 8003f1a:	bf00      	nop
 8003f1c:	f3af 8000 	nop.w
	...
 8003f28:	3fe921fb 	.word	0x3fe921fb
 8003f2c:	7fefffff 	.word	0x7fefffff

08003f30 <sqrt>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	ed2d 8b02 	vpush	{d8}
 8003f36:	ec55 4b10 	vmov	r4, r5, d0
 8003f3a:	f000 fa31 	bl	80043a0 <__ieee754_sqrt>
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	4620      	mov	r0, r4
 8003f44:	4629      	mov	r1, r5
 8003f46:	eeb0 8a40 	vmov.f32	s16, s0
 8003f4a:	eef0 8a60 	vmov.f32	s17, s1
 8003f4e:	f7fc fd91 	bl	8000a74 <__aeabi_dcmpun>
 8003f52:	b990      	cbnz	r0, 8003f7a <sqrt+0x4a>
 8003f54:	2200      	movs	r2, #0
 8003f56:	2300      	movs	r3, #0
 8003f58:	4620      	mov	r0, r4
 8003f5a:	4629      	mov	r1, r5
 8003f5c:	f7fc fd62 	bl	8000a24 <__aeabi_dcmplt>
 8003f60:	b158      	cbz	r0, 8003f7a <sqrt+0x4a>
 8003f62:	f7ff ff07 	bl	8003d74 <__errno>
 8003f66:	2321      	movs	r3, #33	; 0x21
 8003f68:	6003      	str	r3, [r0, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	4610      	mov	r0, r2
 8003f70:	4619      	mov	r1, r3
 8003f72:	f7fc fc0f 	bl	8000794 <__aeabi_ddiv>
 8003f76:	ec41 0b18 	vmov	d8, r0, r1
 8003f7a:	eeb0 0a48 	vmov.f32	s0, s16
 8003f7e:	eef0 0a68 	vmov.f32	s1, s17
 8003f82:	ecbd 8b02 	vpop	{d8}
 8003f86:	bd38      	pop	{r3, r4, r5, pc}

08003f88 <__ieee754_rem_pio2>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	ed2d 8b02 	vpush	{d8}
 8003f90:	ec55 4b10 	vmov	r4, r5, d0
 8003f94:	4bca      	ldr	r3, [pc, #808]	; (80042c0 <__ieee754_rem_pio2+0x338>)
 8003f96:	b08b      	sub	sp, #44	; 0x2c
 8003f98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003f9c:	4598      	cmp	r8, r3
 8003f9e:	4682      	mov	sl, r0
 8003fa0:	9502      	str	r5, [sp, #8]
 8003fa2:	dc08      	bgt.n	8003fb6 <__ieee754_rem_pio2+0x2e>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	ed80 0b00 	vstr	d0, [r0]
 8003fac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003fb0:	f04f 0b00 	mov.w	fp, #0
 8003fb4:	e028      	b.n	8004008 <__ieee754_rem_pio2+0x80>
 8003fb6:	4bc3      	ldr	r3, [pc, #780]	; (80042c4 <__ieee754_rem_pio2+0x33c>)
 8003fb8:	4598      	cmp	r8, r3
 8003fba:	dc78      	bgt.n	80040ae <__ieee754_rem_pio2+0x126>
 8003fbc:	9b02      	ldr	r3, [sp, #8]
 8003fbe:	4ec2      	ldr	r6, [pc, #776]	; (80042c8 <__ieee754_rem_pio2+0x340>)
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	ee10 0a10 	vmov	r0, s0
 8003fc6:	a3b0      	add	r3, pc, #704	; (adr r3, 8004288 <__ieee754_rem_pio2+0x300>)
 8003fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fcc:	4629      	mov	r1, r5
 8003fce:	dd39      	ble.n	8004044 <__ieee754_rem_pio2+0xbc>
 8003fd0:	f7fc f8fe 	bl	80001d0 <__aeabi_dsub>
 8003fd4:	45b0      	cmp	r8, r6
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	460d      	mov	r5, r1
 8003fda:	d01b      	beq.n	8004014 <__ieee754_rem_pio2+0x8c>
 8003fdc:	a3ac      	add	r3, pc, #688	; (adr r3, 8004290 <__ieee754_rem_pio2+0x308>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc f8f5 	bl	80001d0 <__aeabi_dsub>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	e9ca 2300 	strd	r2, r3, [sl]
 8003fee:	4620      	mov	r0, r4
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	f7fc f8ed 	bl	80001d0 <__aeabi_dsub>
 8003ff6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004290 <__ieee754_rem_pio2+0x308>)
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f7fc f8e8 	bl	80001d0 <__aeabi_dsub>
 8004000:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004004:	f04f 0b01 	mov.w	fp, #1
 8004008:	4658      	mov	r0, fp
 800400a:	b00b      	add	sp, #44	; 0x2c
 800400c:	ecbd 8b02 	vpop	{d8}
 8004010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004014:	a3a0      	add	r3, pc, #640	; (adr r3, 8004298 <__ieee754_rem_pio2+0x310>)
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f7fc f8d9 	bl	80001d0 <__aeabi_dsub>
 800401e:	a3a0      	add	r3, pc, #640	; (adr r3, 80042a0 <__ieee754_rem_pio2+0x318>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	4604      	mov	r4, r0
 8004026:	460d      	mov	r5, r1
 8004028:	f7fc f8d2 	bl	80001d0 <__aeabi_dsub>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	e9ca 2300 	strd	r2, r3, [sl]
 8004034:	4620      	mov	r0, r4
 8004036:	4629      	mov	r1, r5
 8004038:	f7fc f8ca 	bl	80001d0 <__aeabi_dsub>
 800403c:	a398      	add	r3, pc, #608	; (adr r3, 80042a0 <__ieee754_rem_pio2+0x318>)
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	e7db      	b.n	8003ffc <__ieee754_rem_pio2+0x74>
 8004044:	f7fc f8c6 	bl	80001d4 <__adddf3>
 8004048:	45b0      	cmp	r8, r6
 800404a:	4604      	mov	r4, r0
 800404c:	460d      	mov	r5, r1
 800404e:	d016      	beq.n	800407e <__ieee754_rem_pio2+0xf6>
 8004050:	a38f      	add	r3, pc, #572	; (adr r3, 8004290 <__ieee754_rem_pio2+0x308>)
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f7fc f8bd 	bl	80001d4 <__adddf3>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	e9ca 2300 	strd	r2, r3, [sl]
 8004062:	4620      	mov	r0, r4
 8004064:	4629      	mov	r1, r5
 8004066:	f7fc f8b3 	bl	80001d0 <__aeabi_dsub>
 800406a:	a389      	add	r3, pc, #548	; (adr r3, 8004290 <__ieee754_rem_pio2+0x308>)
 800406c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004070:	f7fc f8b0 	bl	80001d4 <__adddf3>
 8004074:	f04f 3bff 	mov.w	fp, #4294967295
 8004078:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800407c:	e7c4      	b.n	8004008 <__ieee754_rem_pio2+0x80>
 800407e:	a386      	add	r3, pc, #536	; (adr r3, 8004298 <__ieee754_rem_pio2+0x310>)
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f7fc f8a6 	bl	80001d4 <__adddf3>
 8004088:	a385      	add	r3, pc, #532	; (adr r3, 80042a0 <__ieee754_rem_pio2+0x318>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	4604      	mov	r4, r0
 8004090:	460d      	mov	r5, r1
 8004092:	f7fc f89f 	bl	80001d4 <__adddf3>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	e9ca 2300 	strd	r2, r3, [sl]
 800409e:	4620      	mov	r0, r4
 80040a0:	4629      	mov	r1, r5
 80040a2:	f7fc f895 	bl	80001d0 <__aeabi_dsub>
 80040a6:	a37e      	add	r3, pc, #504	; (adr r3, 80042a0 <__ieee754_rem_pio2+0x318>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	e7e0      	b.n	8004070 <__ieee754_rem_pio2+0xe8>
 80040ae:	4b87      	ldr	r3, [pc, #540]	; (80042cc <__ieee754_rem_pio2+0x344>)
 80040b0:	4598      	cmp	r8, r3
 80040b2:	f300 80d9 	bgt.w	8004268 <__ieee754_rem_pio2+0x2e0>
 80040b6:	f000 fefd 	bl	8004eb4 <fabs>
 80040ba:	ec55 4b10 	vmov	r4, r5, d0
 80040be:	ee10 0a10 	vmov	r0, s0
 80040c2:	a379      	add	r3, pc, #484	; (adr r3, 80042a8 <__ieee754_rem_pio2+0x320>)
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	4629      	mov	r1, r5
 80040ca:	f7fc fa39 	bl	8000540 <__aeabi_dmul>
 80040ce:	4b80      	ldr	r3, [pc, #512]	; (80042d0 <__ieee754_rem_pio2+0x348>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	f7fc f87f 	bl	80001d4 <__adddf3>
 80040d6:	f7fc fce3 	bl	8000aa0 <__aeabi_d2iz>
 80040da:	4683      	mov	fp, r0
 80040dc:	f7fc f9c6 	bl	800046c <__aeabi_i2d>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	ec43 2b18 	vmov	d8, r2, r3
 80040e8:	a367      	add	r3, pc, #412	; (adr r3, 8004288 <__ieee754_rem_pio2+0x300>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f7fc fa27 	bl	8000540 <__aeabi_dmul>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4620      	mov	r0, r4
 80040f8:	4629      	mov	r1, r5
 80040fa:	f7fc f869 	bl	80001d0 <__aeabi_dsub>
 80040fe:	a364      	add	r3, pc, #400	; (adr r3, 8004290 <__ieee754_rem_pio2+0x308>)
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	4606      	mov	r6, r0
 8004106:	460f      	mov	r7, r1
 8004108:	ec51 0b18 	vmov	r0, r1, d8
 800410c:	f7fc fa18 	bl	8000540 <__aeabi_dmul>
 8004110:	f1bb 0f1f 	cmp.w	fp, #31
 8004114:	4604      	mov	r4, r0
 8004116:	460d      	mov	r5, r1
 8004118:	dc0d      	bgt.n	8004136 <__ieee754_rem_pio2+0x1ae>
 800411a:	4b6e      	ldr	r3, [pc, #440]	; (80042d4 <__ieee754_rem_pio2+0x34c>)
 800411c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004124:	4543      	cmp	r3, r8
 8004126:	d006      	beq.n	8004136 <__ieee754_rem_pio2+0x1ae>
 8004128:	4622      	mov	r2, r4
 800412a:	462b      	mov	r3, r5
 800412c:	4630      	mov	r0, r6
 800412e:	4639      	mov	r1, r7
 8004130:	f7fc f84e 	bl	80001d0 <__aeabi_dsub>
 8004134:	e00f      	b.n	8004156 <__ieee754_rem_pio2+0x1ce>
 8004136:	462b      	mov	r3, r5
 8004138:	4622      	mov	r2, r4
 800413a:	4630      	mov	r0, r6
 800413c:	4639      	mov	r1, r7
 800413e:	f7fc f847 	bl	80001d0 <__aeabi_dsub>
 8004142:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004146:	9303      	str	r3, [sp, #12]
 8004148:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800414c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004150:	f1b8 0f10 	cmp.w	r8, #16
 8004154:	dc02      	bgt.n	800415c <__ieee754_rem_pio2+0x1d4>
 8004156:	e9ca 0100 	strd	r0, r1, [sl]
 800415a:	e039      	b.n	80041d0 <__ieee754_rem_pio2+0x248>
 800415c:	a34e      	add	r3, pc, #312	; (adr r3, 8004298 <__ieee754_rem_pio2+0x310>)
 800415e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004162:	ec51 0b18 	vmov	r0, r1, d8
 8004166:	f7fc f9eb 	bl	8000540 <__aeabi_dmul>
 800416a:	4604      	mov	r4, r0
 800416c:	460d      	mov	r5, r1
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4630      	mov	r0, r6
 8004174:	4639      	mov	r1, r7
 8004176:	f7fc f82b 	bl	80001d0 <__aeabi_dsub>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4680      	mov	r8, r0
 8004180:	4689      	mov	r9, r1
 8004182:	4630      	mov	r0, r6
 8004184:	4639      	mov	r1, r7
 8004186:	f7fc f823 	bl	80001d0 <__aeabi_dsub>
 800418a:	4622      	mov	r2, r4
 800418c:	462b      	mov	r3, r5
 800418e:	f7fc f81f 	bl	80001d0 <__aeabi_dsub>
 8004192:	a343      	add	r3, pc, #268	; (adr r3, 80042a0 <__ieee754_rem_pio2+0x318>)
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	4604      	mov	r4, r0
 800419a:	460d      	mov	r5, r1
 800419c:	ec51 0b18 	vmov	r0, r1, d8
 80041a0:	f7fc f9ce 	bl	8000540 <__aeabi_dmul>
 80041a4:	4622      	mov	r2, r4
 80041a6:	462b      	mov	r3, r5
 80041a8:	f7fc f812 	bl	80001d0 <__aeabi_dsub>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4604      	mov	r4, r0
 80041b2:	460d      	mov	r5, r1
 80041b4:	4640      	mov	r0, r8
 80041b6:	4649      	mov	r1, r9
 80041b8:	f7fc f80a 	bl	80001d0 <__aeabi_dsub>
 80041bc:	9a03      	ldr	r2, [sp, #12]
 80041be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b31      	cmp	r3, #49	; 0x31
 80041c6:	dc24      	bgt.n	8004212 <__ieee754_rem_pio2+0x28a>
 80041c8:	e9ca 0100 	strd	r0, r1, [sl]
 80041cc:	4646      	mov	r6, r8
 80041ce:	464f      	mov	r7, r9
 80041d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80041d4:	4630      	mov	r0, r6
 80041d6:	4642      	mov	r2, r8
 80041d8:	464b      	mov	r3, r9
 80041da:	4639      	mov	r1, r7
 80041dc:	f7fb fff8 	bl	80001d0 <__aeabi_dsub>
 80041e0:	462b      	mov	r3, r5
 80041e2:	4622      	mov	r2, r4
 80041e4:	f7fb fff4 	bl	80001d0 <__aeabi_dsub>
 80041e8:	9b02      	ldr	r3, [sp, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80041f0:	f6bf af0a 	bge.w	8004008 <__ieee754_rem_pio2+0x80>
 80041f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80041f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80041fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004200:	f8ca 8000 	str.w	r8, [sl]
 8004204:	f8ca 0008 	str.w	r0, [sl, #8]
 8004208:	f8ca 300c 	str.w	r3, [sl, #12]
 800420c:	f1cb 0b00 	rsb	fp, fp, #0
 8004210:	e6fa      	b.n	8004008 <__ieee754_rem_pio2+0x80>
 8004212:	a327      	add	r3, pc, #156	; (adr r3, 80042b0 <__ieee754_rem_pio2+0x328>)
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	ec51 0b18 	vmov	r0, r1, d8
 800421c:	f7fc f990 	bl	8000540 <__aeabi_dmul>
 8004220:	4604      	mov	r4, r0
 8004222:	460d      	mov	r5, r1
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4640      	mov	r0, r8
 800422a:	4649      	mov	r1, r9
 800422c:	f7fb ffd0 	bl	80001d0 <__aeabi_dsub>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4606      	mov	r6, r0
 8004236:	460f      	mov	r7, r1
 8004238:	4640      	mov	r0, r8
 800423a:	4649      	mov	r1, r9
 800423c:	f7fb ffc8 	bl	80001d0 <__aeabi_dsub>
 8004240:	4622      	mov	r2, r4
 8004242:	462b      	mov	r3, r5
 8004244:	f7fb ffc4 	bl	80001d0 <__aeabi_dsub>
 8004248:	a31b      	add	r3, pc, #108	; (adr r3, 80042b8 <__ieee754_rem_pio2+0x330>)
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	4604      	mov	r4, r0
 8004250:	460d      	mov	r5, r1
 8004252:	ec51 0b18 	vmov	r0, r1, d8
 8004256:	f7fc f973 	bl	8000540 <__aeabi_dmul>
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	f7fb ffb7 	bl	80001d0 <__aeabi_dsub>
 8004262:	4604      	mov	r4, r0
 8004264:	460d      	mov	r5, r1
 8004266:	e75f      	b.n	8004128 <__ieee754_rem_pio2+0x1a0>
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <__ieee754_rem_pio2+0x350>)
 800426a:	4598      	cmp	r8, r3
 800426c:	dd36      	ble.n	80042dc <__ieee754_rem_pio2+0x354>
 800426e:	ee10 2a10 	vmov	r2, s0
 8004272:	462b      	mov	r3, r5
 8004274:	4620      	mov	r0, r4
 8004276:	4629      	mov	r1, r5
 8004278:	f7fb ffaa 	bl	80001d0 <__aeabi_dsub>
 800427c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004280:	e9ca 0100 	strd	r0, r1, [sl]
 8004284:	e694      	b.n	8003fb0 <__ieee754_rem_pio2+0x28>
 8004286:	bf00      	nop
 8004288:	54400000 	.word	0x54400000
 800428c:	3ff921fb 	.word	0x3ff921fb
 8004290:	1a626331 	.word	0x1a626331
 8004294:	3dd0b461 	.word	0x3dd0b461
 8004298:	1a600000 	.word	0x1a600000
 800429c:	3dd0b461 	.word	0x3dd0b461
 80042a0:	2e037073 	.word	0x2e037073
 80042a4:	3ba3198a 	.word	0x3ba3198a
 80042a8:	6dc9c883 	.word	0x6dc9c883
 80042ac:	3fe45f30 	.word	0x3fe45f30
 80042b0:	2e000000 	.word	0x2e000000
 80042b4:	3ba3198a 	.word	0x3ba3198a
 80042b8:	252049c1 	.word	0x252049c1
 80042bc:	397b839a 	.word	0x397b839a
 80042c0:	3fe921fb 	.word	0x3fe921fb
 80042c4:	4002d97b 	.word	0x4002d97b
 80042c8:	3ff921fb 	.word	0x3ff921fb
 80042cc:	413921fb 	.word	0x413921fb
 80042d0:	3fe00000 	.word	0x3fe00000
 80042d4:	08005120 	.word	0x08005120
 80042d8:	7fefffff 	.word	0x7fefffff
 80042dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80042e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80042e4:	ee10 0a10 	vmov	r0, s0
 80042e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80042ec:	ee10 6a10 	vmov	r6, s0
 80042f0:	460f      	mov	r7, r1
 80042f2:	f7fc fbd5 	bl	8000aa0 <__aeabi_d2iz>
 80042f6:	f7fc f8b9 	bl	800046c <__aeabi_i2d>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	4630      	mov	r0, r6
 8004300:	4639      	mov	r1, r7
 8004302:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004306:	f7fb ff63 	bl	80001d0 <__aeabi_dsub>
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <__ieee754_rem_pio2+0x410>)
 800430c:	2200      	movs	r2, #0
 800430e:	f7fc f917 	bl	8000540 <__aeabi_dmul>
 8004312:	460f      	mov	r7, r1
 8004314:	4606      	mov	r6, r0
 8004316:	f7fc fbc3 	bl	8000aa0 <__aeabi_d2iz>
 800431a:	f7fc f8a7 	bl	800046c <__aeabi_i2d>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4630      	mov	r0, r6
 8004324:	4639      	mov	r1, r7
 8004326:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800432a:	f7fb ff51 	bl	80001d0 <__aeabi_dsub>
 800432e:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <__ieee754_rem_pio2+0x410>)
 8004330:	2200      	movs	r2, #0
 8004332:	f7fc f905 	bl	8000540 <__aeabi_dmul>
 8004336:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800433a:	ad04      	add	r5, sp, #16
 800433c:	f04f 0803 	mov.w	r8, #3
 8004340:	46a9      	mov	r9, r5
 8004342:	2600      	movs	r6, #0
 8004344:	2700      	movs	r7, #0
 8004346:	4632      	mov	r2, r6
 8004348:	463b      	mov	r3, r7
 800434a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800434e:	46c3      	mov	fp, r8
 8004350:	3d08      	subs	r5, #8
 8004352:	f108 38ff 	add.w	r8, r8, #4294967295
 8004356:	f7fc fb5b 	bl	8000a10 <__aeabi_dcmpeq>
 800435a:	2800      	cmp	r0, #0
 800435c:	d1f3      	bne.n	8004346 <__ieee754_rem_pio2+0x3be>
 800435e:	4b0f      	ldr	r3, [pc, #60]	; (800439c <__ieee754_rem_pio2+0x414>)
 8004360:	9301      	str	r3, [sp, #4]
 8004362:	2302      	movs	r3, #2
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	4622      	mov	r2, r4
 8004368:	465b      	mov	r3, fp
 800436a:	4651      	mov	r1, sl
 800436c:	4648      	mov	r0, r9
 800436e:	f000 f993 	bl	8004698 <__kernel_rem_pio2>
 8004372:	9b02      	ldr	r3, [sp, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	4683      	mov	fp, r0
 8004378:	f6bf ae46 	bge.w	8004008 <__ieee754_rem_pio2+0x80>
 800437c:	e9da 2100 	ldrd	r2, r1, [sl]
 8004380:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004384:	e9ca 2300 	strd	r2, r3, [sl]
 8004388:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800438c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004390:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004394:	e73a      	b.n	800420c <__ieee754_rem_pio2+0x284>
 8004396:	bf00      	nop
 8004398:	41700000 	.word	0x41700000
 800439c:	080051a0 	.word	0x080051a0

080043a0 <__ieee754_sqrt>:
 80043a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a4:	ec55 4b10 	vmov	r4, r5, d0
 80043a8:	4e55      	ldr	r6, [pc, #340]	; (8004500 <__ieee754_sqrt+0x160>)
 80043aa:	43ae      	bics	r6, r5
 80043ac:	ee10 0a10 	vmov	r0, s0
 80043b0:	ee10 3a10 	vmov	r3, s0
 80043b4:	462a      	mov	r2, r5
 80043b6:	4629      	mov	r1, r5
 80043b8:	d110      	bne.n	80043dc <__ieee754_sqrt+0x3c>
 80043ba:	ee10 2a10 	vmov	r2, s0
 80043be:	462b      	mov	r3, r5
 80043c0:	f7fc f8be 	bl	8000540 <__aeabi_dmul>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4620      	mov	r0, r4
 80043ca:	4629      	mov	r1, r5
 80043cc:	f7fb ff02 	bl	80001d4 <__adddf3>
 80043d0:	4604      	mov	r4, r0
 80043d2:	460d      	mov	r5, r1
 80043d4:	ec45 4b10 	vmov	d0, r4, r5
 80043d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043dc:	2d00      	cmp	r5, #0
 80043de:	dc10      	bgt.n	8004402 <__ieee754_sqrt+0x62>
 80043e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80043e4:	4330      	orrs	r0, r6
 80043e6:	d0f5      	beq.n	80043d4 <__ieee754_sqrt+0x34>
 80043e8:	b15d      	cbz	r5, 8004402 <__ieee754_sqrt+0x62>
 80043ea:	ee10 2a10 	vmov	r2, s0
 80043ee:	462b      	mov	r3, r5
 80043f0:	ee10 0a10 	vmov	r0, s0
 80043f4:	f7fb feec 	bl	80001d0 <__aeabi_dsub>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	f7fc f9ca 	bl	8000794 <__aeabi_ddiv>
 8004400:	e7e6      	b.n	80043d0 <__ieee754_sqrt+0x30>
 8004402:	1512      	asrs	r2, r2, #20
 8004404:	d074      	beq.n	80044f0 <__ieee754_sqrt+0x150>
 8004406:	07d4      	lsls	r4, r2, #31
 8004408:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800440c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8004410:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004414:	bf5e      	ittt	pl
 8004416:	0fda      	lsrpl	r2, r3, #31
 8004418:	005b      	lslpl	r3, r3, #1
 800441a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800441e:	2400      	movs	r4, #0
 8004420:	0fda      	lsrs	r2, r3, #31
 8004422:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004426:	107f      	asrs	r7, r7, #1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2516      	movs	r5, #22
 800442c:	4620      	mov	r0, r4
 800442e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004432:	1886      	adds	r6, r0, r2
 8004434:	428e      	cmp	r6, r1
 8004436:	bfde      	ittt	le
 8004438:	1b89      	suble	r1, r1, r6
 800443a:	18b0      	addle	r0, r6, r2
 800443c:	18a4      	addle	r4, r4, r2
 800443e:	0049      	lsls	r1, r1, #1
 8004440:	3d01      	subs	r5, #1
 8004442:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8004446:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800444a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800444e:	d1f0      	bne.n	8004432 <__ieee754_sqrt+0x92>
 8004450:	462a      	mov	r2, r5
 8004452:	f04f 0e20 	mov.w	lr, #32
 8004456:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800445a:	4281      	cmp	r1, r0
 800445c:	eb06 0c05 	add.w	ip, r6, r5
 8004460:	dc02      	bgt.n	8004468 <__ieee754_sqrt+0xc8>
 8004462:	d113      	bne.n	800448c <__ieee754_sqrt+0xec>
 8004464:	459c      	cmp	ip, r3
 8004466:	d811      	bhi.n	800448c <__ieee754_sqrt+0xec>
 8004468:	f1bc 0f00 	cmp.w	ip, #0
 800446c:	eb0c 0506 	add.w	r5, ip, r6
 8004470:	da43      	bge.n	80044fa <__ieee754_sqrt+0x15a>
 8004472:	2d00      	cmp	r5, #0
 8004474:	db41      	blt.n	80044fa <__ieee754_sqrt+0x15a>
 8004476:	f100 0801 	add.w	r8, r0, #1
 800447a:	1a09      	subs	r1, r1, r0
 800447c:	459c      	cmp	ip, r3
 800447e:	bf88      	it	hi
 8004480:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8004484:	eba3 030c 	sub.w	r3, r3, ip
 8004488:	4432      	add	r2, r6
 800448a:	4640      	mov	r0, r8
 800448c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8004490:	f1be 0e01 	subs.w	lr, lr, #1
 8004494:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8004498:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800449c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80044a0:	d1db      	bne.n	800445a <__ieee754_sqrt+0xba>
 80044a2:	430b      	orrs	r3, r1
 80044a4:	d006      	beq.n	80044b4 <__ieee754_sqrt+0x114>
 80044a6:	1c50      	adds	r0, r2, #1
 80044a8:	bf13      	iteet	ne
 80044aa:	3201      	addne	r2, #1
 80044ac:	3401      	addeq	r4, #1
 80044ae:	4672      	moveq	r2, lr
 80044b0:	f022 0201 	bicne.w	r2, r2, #1
 80044b4:	1063      	asrs	r3, r4, #1
 80044b6:	0852      	lsrs	r2, r2, #1
 80044b8:	07e1      	lsls	r1, r4, #31
 80044ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80044be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80044c2:	bf48      	it	mi
 80044c4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80044c8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80044cc:	4614      	mov	r4, r2
 80044ce:	e781      	b.n	80043d4 <__ieee754_sqrt+0x34>
 80044d0:	0ad9      	lsrs	r1, r3, #11
 80044d2:	3815      	subs	r0, #21
 80044d4:	055b      	lsls	r3, r3, #21
 80044d6:	2900      	cmp	r1, #0
 80044d8:	d0fa      	beq.n	80044d0 <__ieee754_sqrt+0x130>
 80044da:	02cd      	lsls	r5, r1, #11
 80044dc:	d50a      	bpl.n	80044f4 <__ieee754_sqrt+0x154>
 80044de:	f1c2 0420 	rsb	r4, r2, #32
 80044e2:	fa23 f404 	lsr.w	r4, r3, r4
 80044e6:	1e55      	subs	r5, r2, #1
 80044e8:	4093      	lsls	r3, r2
 80044ea:	4321      	orrs	r1, r4
 80044ec:	1b42      	subs	r2, r0, r5
 80044ee:	e78a      	b.n	8004406 <__ieee754_sqrt+0x66>
 80044f0:	4610      	mov	r0, r2
 80044f2:	e7f0      	b.n	80044d6 <__ieee754_sqrt+0x136>
 80044f4:	0049      	lsls	r1, r1, #1
 80044f6:	3201      	adds	r2, #1
 80044f8:	e7ef      	b.n	80044da <__ieee754_sqrt+0x13a>
 80044fa:	4680      	mov	r8, r0
 80044fc:	e7bd      	b.n	800447a <__ieee754_sqrt+0xda>
 80044fe:	bf00      	nop
 8004500:	7ff00000 	.word	0x7ff00000
 8004504:	00000000 	.word	0x00000000

08004508 <__kernel_cos>:
 8004508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	ec57 6b10 	vmov	r6, r7, d0
 8004510:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004514:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004518:	ed8d 1b00 	vstr	d1, [sp]
 800451c:	da07      	bge.n	800452e <__kernel_cos+0x26>
 800451e:	ee10 0a10 	vmov	r0, s0
 8004522:	4639      	mov	r1, r7
 8004524:	f7fc fabc 	bl	8000aa0 <__aeabi_d2iz>
 8004528:	2800      	cmp	r0, #0
 800452a:	f000 8088 	beq.w	800463e <__kernel_cos+0x136>
 800452e:	4632      	mov	r2, r6
 8004530:	463b      	mov	r3, r7
 8004532:	4630      	mov	r0, r6
 8004534:	4639      	mov	r1, r7
 8004536:	f7fc f803 	bl	8000540 <__aeabi_dmul>
 800453a:	4b51      	ldr	r3, [pc, #324]	; (8004680 <__kernel_cos+0x178>)
 800453c:	2200      	movs	r2, #0
 800453e:	4604      	mov	r4, r0
 8004540:	460d      	mov	r5, r1
 8004542:	f7fb fffd 	bl	8000540 <__aeabi_dmul>
 8004546:	a340      	add	r3, pc, #256	; (adr r3, 8004648 <__kernel_cos+0x140>)
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	4682      	mov	sl, r0
 800454e:	468b      	mov	fp, r1
 8004550:	4620      	mov	r0, r4
 8004552:	4629      	mov	r1, r5
 8004554:	f7fb fff4 	bl	8000540 <__aeabi_dmul>
 8004558:	a33d      	add	r3, pc, #244	; (adr r3, 8004650 <__kernel_cos+0x148>)
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f7fb fe39 	bl	80001d4 <__adddf3>
 8004562:	4622      	mov	r2, r4
 8004564:	462b      	mov	r3, r5
 8004566:	f7fb ffeb 	bl	8000540 <__aeabi_dmul>
 800456a:	a33b      	add	r3, pc, #236	; (adr r3, 8004658 <__kernel_cos+0x150>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f7fb fe2e 	bl	80001d0 <__aeabi_dsub>
 8004574:	4622      	mov	r2, r4
 8004576:	462b      	mov	r3, r5
 8004578:	f7fb ffe2 	bl	8000540 <__aeabi_dmul>
 800457c:	a338      	add	r3, pc, #224	; (adr r3, 8004660 <__kernel_cos+0x158>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fb fe27 	bl	80001d4 <__adddf3>
 8004586:	4622      	mov	r2, r4
 8004588:	462b      	mov	r3, r5
 800458a:	f7fb ffd9 	bl	8000540 <__aeabi_dmul>
 800458e:	a336      	add	r3, pc, #216	; (adr r3, 8004668 <__kernel_cos+0x160>)
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f7fb fe1c 	bl	80001d0 <__aeabi_dsub>
 8004598:	4622      	mov	r2, r4
 800459a:	462b      	mov	r3, r5
 800459c:	f7fb ffd0 	bl	8000540 <__aeabi_dmul>
 80045a0:	a333      	add	r3, pc, #204	; (adr r3, 8004670 <__kernel_cos+0x168>)
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	f7fb fe15 	bl	80001d4 <__adddf3>
 80045aa:	4622      	mov	r2, r4
 80045ac:	462b      	mov	r3, r5
 80045ae:	f7fb ffc7 	bl	8000540 <__aeabi_dmul>
 80045b2:	4622      	mov	r2, r4
 80045b4:	462b      	mov	r3, r5
 80045b6:	f7fb ffc3 	bl	8000540 <__aeabi_dmul>
 80045ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80045be:	4604      	mov	r4, r0
 80045c0:	460d      	mov	r5, r1
 80045c2:	4630      	mov	r0, r6
 80045c4:	4639      	mov	r1, r7
 80045c6:	f7fb ffbb 	bl	8000540 <__aeabi_dmul>
 80045ca:	460b      	mov	r3, r1
 80045cc:	4602      	mov	r2, r0
 80045ce:	4629      	mov	r1, r5
 80045d0:	4620      	mov	r0, r4
 80045d2:	f7fb fdfd 	bl	80001d0 <__aeabi_dsub>
 80045d6:	4b2b      	ldr	r3, [pc, #172]	; (8004684 <__kernel_cos+0x17c>)
 80045d8:	4598      	cmp	r8, r3
 80045da:	4606      	mov	r6, r0
 80045dc:	460f      	mov	r7, r1
 80045de:	dc10      	bgt.n	8004602 <__kernel_cos+0xfa>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4650      	mov	r0, sl
 80045e6:	4659      	mov	r1, fp
 80045e8:	f7fb fdf2 	bl	80001d0 <__aeabi_dsub>
 80045ec:	460b      	mov	r3, r1
 80045ee:	4926      	ldr	r1, [pc, #152]	; (8004688 <__kernel_cos+0x180>)
 80045f0:	4602      	mov	r2, r0
 80045f2:	2000      	movs	r0, #0
 80045f4:	f7fb fdec 	bl	80001d0 <__aeabi_dsub>
 80045f8:	ec41 0b10 	vmov	d0, r0, r1
 80045fc:	b003      	add	sp, #12
 80045fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004602:	4b22      	ldr	r3, [pc, #136]	; (800468c <__kernel_cos+0x184>)
 8004604:	4920      	ldr	r1, [pc, #128]	; (8004688 <__kernel_cos+0x180>)
 8004606:	4598      	cmp	r8, r3
 8004608:	bfcc      	ite	gt
 800460a:	4d21      	ldrgt	r5, [pc, #132]	; (8004690 <__kernel_cos+0x188>)
 800460c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004610:	2400      	movs	r4, #0
 8004612:	4622      	mov	r2, r4
 8004614:	462b      	mov	r3, r5
 8004616:	2000      	movs	r0, #0
 8004618:	f7fb fdda 	bl	80001d0 <__aeabi_dsub>
 800461c:	4622      	mov	r2, r4
 800461e:	4680      	mov	r8, r0
 8004620:	4689      	mov	r9, r1
 8004622:	462b      	mov	r3, r5
 8004624:	4650      	mov	r0, sl
 8004626:	4659      	mov	r1, fp
 8004628:	f7fb fdd2 	bl	80001d0 <__aeabi_dsub>
 800462c:	4632      	mov	r2, r6
 800462e:	463b      	mov	r3, r7
 8004630:	f7fb fdce 	bl	80001d0 <__aeabi_dsub>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4640      	mov	r0, r8
 800463a:	4649      	mov	r1, r9
 800463c:	e7da      	b.n	80045f4 <__kernel_cos+0xec>
 800463e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004678 <__kernel_cos+0x170>
 8004642:	e7db      	b.n	80045fc <__kernel_cos+0xf4>
 8004644:	f3af 8000 	nop.w
 8004648:	be8838d4 	.word	0xbe8838d4
 800464c:	bda8fae9 	.word	0xbda8fae9
 8004650:	bdb4b1c4 	.word	0xbdb4b1c4
 8004654:	3e21ee9e 	.word	0x3e21ee9e
 8004658:	809c52ad 	.word	0x809c52ad
 800465c:	3e927e4f 	.word	0x3e927e4f
 8004660:	19cb1590 	.word	0x19cb1590
 8004664:	3efa01a0 	.word	0x3efa01a0
 8004668:	16c15177 	.word	0x16c15177
 800466c:	3f56c16c 	.word	0x3f56c16c
 8004670:	5555554c 	.word	0x5555554c
 8004674:	3fa55555 	.word	0x3fa55555
 8004678:	00000000 	.word	0x00000000
 800467c:	3ff00000 	.word	0x3ff00000
 8004680:	3fe00000 	.word	0x3fe00000
 8004684:	3fd33332 	.word	0x3fd33332
 8004688:	3ff00000 	.word	0x3ff00000
 800468c:	3fe90000 	.word	0x3fe90000
 8004690:	3fd20000 	.word	0x3fd20000
 8004694:	00000000 	.word	0x00000000

08004698 <__kernel_rem_pio2>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	ed2d 8b02 	vpush	{d8}
 80046a0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80046a4:	f112 0f14 	cmn.w	r2, #20
 80046a8:	9308      	str	r3, [sp, #32]
 80046aa:	9101      	str	r1, [sp, #4]
 80046ac:	4bc4      	ldr	r3, [pc, #784]	; (80049c0 <__kernel_rem_pio2+0x328>)
 80046ae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80046b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80046b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046b6:	9302      	str	r3, [sp, #8]
 80046b8:	9b08      	ldr	r3, [sp, #32]
 80046ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80046be:	bfa8      	it	ge
 80046c0:	1ed4      	subge	r4, r2, #3
 80046c2:	9306      	str	r3, [sp, #24]
 80046c4:	bfb2      	itee	lt
 80046c6:	2400      	movlt	r4, #0
 80046c8:	2318      	movge	r3, #24
 80046ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80046ce:	f06f 0317 	mvn.w	r3, #23
 80046d2:	fb04 3303 	mla	r3, r4, r3, r3
 80046d6:	eb03 0a02 	add.w	sl, r3, r2
 80046da:	9b02      	ldr	r3, [sp, #8]
 80046dc:	9a06      	ldr	r2, [sp, #24]
 80046de:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80049b0 <__kernel_rem_pio2+0x318>
 80046e2:	eb03 0802 	add.w	r8, r3, r2
 80046e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80046e8:	1aa7      	subs	r7, r4, r2
 80046ea:	ae22      	add	r6, sp, #136	; 0x88
 80046ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80046f0:	2500      	movs	r5, #0
 80046f2:	4545      	cmp	r5, r8
 80046f4:	dd13      	ble.n	800471e <__kernel_rem_pio2+0x86>
 80046f6:	9b08      	ldr	r3, [sp, #32]
 80046f8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80049b0 <__kernel_rem_pio2+0x318>
 80046fc:	aa22      	add	r2, sp, #136	; 0x88
 80046fe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004702:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004706:	f04f 0800 	mov.w	r8, #0
 800470a:	9b02      	ldr	r3, [sp, #8]
 800470c:	4598      	cmp	r8, r3
 800470e:	dc2f      	bgt.n	8004770 <__kernel_rem_pio2+0xd8>
 8004710:	ed8d 8b04 	vstr	d8, [sp, #16]
 8004714:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8004718:	462f      	mov	r7, r5
 800471a:	2600      	movs	r6, #0
 800471c:	e01b      	b.n	8004756 <__kernel_rem_pio2+0xbe>
 800471e:	42ef      	cmn	r7, r5
 8004720:	d407      	bmi.n	8004732 <__kernel_rem_pio2+0x9a>
 8004722:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004726:	f7fb fea1 	bl	800046c <__aeabi_i2d>
 800472a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800472e:	3501      	adds	r5, #1
 8004730:	e7df      	b.n	80046f2 <__kernel_rem_pio2+0x5a>
 8004732:	ec51 0b18 	vmov	r0, r1, d8
 8004736:	e7f8      	b.n	800472a <__kernel_rem_pio2+0x92>
 8004738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800473c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004740:	f7fb fefe 	bl	8000540 <__aeabi_dmul>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800474c:	f7fb fd42 	bl	80001d4 <__adddf3>
 8004750:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004754:	3601      	adds	r6, #1
 8004756:	9b06      	ldr	r3, [sp, #24]
 8004758:	429e      	cmp	r6, r3
 800475a:	f1a7 0708 	sub.w	r7, r7, #8
 800475e:	ddeb      	ble.n	8004738 <__kernel_rem_pio2+0xa0>
 8004760:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004764:	f108 0801 	add.w	r8, r8, #1
 8004768:	ecab 7b02 	vstmia	fp!, {d7}
 800476c:	3508      	adds	r5, #8
 800476e:	e7cc      	b.n	800470a <__kernel_rem_pio2+0x72>
 8004770:	9b02      	ldr	r3, [sp, #8]
 8004772:	aa0e      	add	r2, sp, #56	; 0x38
 8004774:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004778:	930d      	str	r3, [sp, #52]	; 0x34
 800477a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800477c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004780:	9c02      	ldr	r4, [sp, #8]
 8004782:	930c      	str	r3, [sp, #48]	; 0x30
 8004784:	00e3      	lsls	r3, r4, #3
 8004786:	930a      	str	r3, [sp, #40]	; 0x28
 8004788:	ab9a      	add	r3, sp, #616	; 0x268
 800478a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800478e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004792:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004796:	ab72      	add	r3, sp, #456	; 0x1c8
 8004798:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800479c:	46c3      	mov	fp, r8
 800479e:	46a1      	mov	r9, r4
 80047a0:	f1b9 0f00 	cmp.w	r9, #0
 80047a4:	f1a5 0508 	sub.w	r5, r5, #8
 80047a8:	dc77      	bgt.n	800489a <__kernel_rem_pio2+0x202>
 80047aa:	ec47 6b10 	vmov	d0, r6, r7
 80047ae:	4650      	mov	r0, sl
 80047b0:	f000 fc0a 	bl	8004fc8 <scalbn>
 80047b4:	ec57 6b10 	vmov	r6, r7, d0
 80047b8:	2200      	movs	r2, #0
 80047ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80047be:	ee10 0a10 	vmov	r0, s0
 80047c2:	4639      	mov	r1, r7
 80047c4:	f7fb febc 	bl	8000540 <__aeabi_dmul>
 80047c8:	ec41 0b10 	vmov	d0, r0, r1
 80047cc:	f000 fb7c 	bl	8004ec8 <floor>
 80047d0:	4b7c      	ldr	r3, [pc, #496]	; (80049c4 <__kernel_rem_pio2+0x32c>)
 80047d2:	ec51 0b10 	vmov	r0, r1, d0
 80047d6:	2200      	movs	r2, #0
 80047d8:	f7fb feb2 	bl	8000540 <__aeabi_dmul>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4630      	mov	r0, r6
 80047e2:	4639      	mov	r1, r7
 80047e4:	f7fb fcf4 	bl	80001d0 <__aeabi_dsub>
 80047e8:	460f      	mov	r7, r1
 80047ea:	4606      	mov	r6, r0
 80047ec:	f7fc f958 	bl	8000aa0 <__aeabi_d2iz>
 80047f0:	9004      	str	r0, [sp, #16]
 80047f2:	f7fb fe3b 	bl	800046c <__aeabi_i2d>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4630      	mov	r0, r6
 80047fc:	4639      	mov	r1, r7
 80047fe:	f7fb fce7 	bl	80001d0 <__aeabi_dsub>
 8004802:	f1ba 0f00 	cmp.w	sl, #0
 8004806:	4606      	mov	r6, r0
 8004808:	460f      	mov	r7, r1
 800480a:	dd6d      	ble.n	80048e8 <__kernel_rem_pio2+0x250>
 800480c:	1e62      	subs	r2, r4, #1
 800480e:	ab0e      	add	r3, sp, #56	; 0x38
 8004810:	9d04      	ldr	r5, [sp, #16]
 8004812:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004816:	f1ca 0118 	rsb	r1, sl, #24
 800481a:	fa40 f301 	asr.w	r3, r0, r1
 800481e:	441d      	add	r5, r3
 8004820:	408b      	lsls	r3, r1
 8004822:	1ac0      	subs	r0, r0, r3
 8004824:	ab0e      	add	r3, sp, #56	; 0x38
 8004826:	9504      	str	r5, [sp, #16]
 8004828:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800482c:	f1ca 0317 	rsb	r3, sl, #23
 8004830:	fa40 fb03 	asr.w	fp, r0, r3
 8004834:	f1bb 0f00 	cmp.w	fp, #0
 8004838:	dd65      	ble.n	8004906 <__kernel_rem_pio2+0x26e>
 800483a:	9b04      	ldr	r3, [sp, #16]
 800483c:	2200      	movs	r2, #0
 800483e:	3301      	adds	r3, #1
 8004840:	9304      	str	r3, [sp, #16]
 8004842:	4615      	mov	r5, r2
 8004844:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004848:	4294      	cmp	r4, r2
 800484a:	f300 809c 	bgt.w	8004986 <__kernel_rem_pio2+0x2ee>
 800484e:	f1ba 0f00 	cmp.w	sl, #0
 8004852:	dd07      	ble.n	8004864 <__kernel_rem_pio2+0x1cc>
 8004854:	f1ba 0f01 	cmp.w	sl, #1
 8004858:	f000 80c0 	beq.w	80049dc <__kernel_rem_pio2+0x344>
 800485c:	f1ba 0f02 	cmp.w	sl, #2
 8004860:	f000 80c6 	beq.w	80049f0 <__kernel_rem_pio2+0x358>
 8004864:	f1bb 0f02 	cmp.w	fp, #2
 8004868:	d14d      	bne.n	8004906 <__kernel_rem_pio2+0x26e>
 800486a:	4632      	mov	r2, r6
 800486c:	463b      	mov	r3, r7
 800486e:	4956      	ldr	r1, [pc, #344]	; (80049c8 <__kernel_rem_pio2+0x330>)
 8004870:	2000      	movs	r0, #0
 8004872:	f7fb fcad 	bl	80001d0 <__aeabi_dsub>
 8004876:	4606      	mov	r6, r0
 8004878:	460f      	mov	r7, r1
 800487a:	2d00      	cmp	r5, #0
 800487c:	d043      	beq.n	8004906 <__kernel_rem_pio2+0x26e>
 800487e:	4650      	mov	r0, sl
 8004880:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80049b8 <__kernel_rem_pio2+0x320>
 8004884:	f000 fba0 	bl	8004fc8 <scalbn>
 8004888:	4630      	mov	r0, r6
 800488a:	4639      	mov	r1, r7
 800488c:	ec53 2b10 	vmov	r2, r3, d0
 8004890:	f7fb fc9e 	bl	80001d0 <__aeabi_dsub>
 8004894:	4606      	mov	r6, r0
 8004896:	460f      	mov	r7, r1
 8004898:	e035      	b.n	8004906 <__kernel_rem_pio2+0x26e>
 800489a:	4b4c      	ldr	r3, [pc, #304]	; (80049cc <__kernel_rem_pio2+0x334>)
 800489c:	2200      	movs	r2, #0
 800489e:	4630      	mov	r0, r6
 80048a0:	4639      	mov	r1, r7
 80048a2:	f7fb fe4d 	bl	8000540 <__aeabi_dmul>
 80048a6:	f7fc f8fb 	bl	8000aa0 <__aeabi_d2iz>
 80048aa:	f7fb fddf 	bl	800046c <__aeabi_i2d>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	ec43 2b18 	vmov	d8, r2, r3
 80048b6:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <__kernel_rem_pio2+0x338>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	f7fb fe41 	bl	8000540 <__aeabi_dmul>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4630      	mov	r0, r6
 80048c4:	4639      	mov	r1, r7
 80048c6:	f7fb fc83 	bl	80001d0 <__aeabi_dsub>
 80048ca:	f7fc f8e9 	bl	8000aa0 <__aeabi_d2iz>
 80048ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80048d2:	f84b 0b04 	str.w	r0, [fp], #4
 80048d6:	ec51 0b18 	vmov	r0, r1, d8
 80048da:	f7fb fc7b 	bl	80001d4 <__adddf3>
 80048de:	f109 39ff 	add.w	r9, r9, #4294967295
 80048e2:	4606      	mov	r6, r0
 80048e4:	460f      	mov	r7, r1
 80048e6:	e75b      	b.n	80047a0 <__kernel_rem_pio2+0x108>
 80048e8:	d106      	bne.n	80048f8 <__kernel_rem_pio2+0x260>
 80048ea:	1e63      	subs	r3, r4, #1
 80048ec:	aa0e      	add	r2, sp, #56	; 0x38
 80048ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80048f2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80048f6:	e79d      	b.n	8004834 <__kernel_rem_pio2+0x19c>
 80048f8:	4b36      	ldr	r3, [pc, #216]	; (80049d4 <__kernel_rem_pio2+0x33c>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	f7fc f8a6 	bl	8000a4c <__aeabi_dcmpge>
 8004900:	2800      	cmp	r0, #0
 8004902:	d13d      	bne.n	8004980 <__kernel_rem_pio2+0x2e8>
 8004904:	4683      	mov	fp, r0
 8004906:	2200      	movs	r2, #0
 8004908:	2300      	movs	r3, #0
 800490a:	4630      	mov	r0, r6
 800490c:	4639      	mov	r1, r7
 800490e:	f7fc f87f 	bl	8000a10 <__aeabi_dcmpeq>
 8004912:	2800      	cmp	r0, #0
 8004914:	f000 80c0 	beq.w	8004a98 <__kernel_rem_pio2+0x400>
 8004918:	1e65      	subs	r5, r4, #1
 800491a:	462b      	mov	r3, r5
 800491c:	2200      	movs	r2, #0
 800491e:	9902      	ldr	r1, [sp, #8]
 8004920:	428b      	cmp	r3, r1
 8004922:	da6c      	bge.n	80049fe <__kernel_rem_pio2+0x366>
 8004924:	2a00      	cmp	r2, #0
 8004926:	f000 8089 	beq.w	8004a3c <__kernel_rem_pio2+0x3a4>
 800492a:	ab0e      	add	r3, sp, #56	; 0x38
 800492c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004930:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 80ad 	beq.w	8004a94 <__kernel_rem_pio2+0x3fc>
 800493a:	4650      	mov	r0, sl
 800493c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80049b8 <__kernel_rem_pio2+0x320>
 8004940:	f000 fb42 	bl	8004fc8 <scalbn>
 8004944:	ab9a      	add	r3, sp, #616	; 0x268
 8004946:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800494a:	ec57 6b10 	vmov	r6, r7, d0
 800494e:	00ec      	lsls	r4, r5, #3
 8004950:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004954:	46aa      	mov	sl, r5
 8004956:	f1ba 0f00 	cmp.w	sl, #0
 800495a:	f280 80d6 	bge.w	8004b0a <__kernel_rem_pio2+0x472>
 800495e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80049b0 <__kernel_rem_pio2+0x318>
 8004962:	462e      	mov	r6, r5
 8004964:	2e00      	cmp	r6, #0
 8004966:	f2c0 8104 	blt.w	8004b72 <__kernel_rem_pio2+0x4da>
 800496a:	ab72      	add	r3, sp, #456	; 0x1c8
 800496c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004970:	f8df a064 	ldr.w	sl, [pc, #100]	; 80049d8 <__kernel_rem_pio2+0x340>
 8004974:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004978:	f04f 0800 	mov.w	r8, #0
 800497c:	1baf      	subs	r7, r5, r6
 800497e:	e0ea      	b.n	8004b56 <__kernel_rem_pio2+0x4be>
 8004980:	f04f 0b02 	mov.w	fp, #2
 8004984:	e759      	b.n	800483a <__kernel_rem_pio2+0x1a2>
 8004986:	f8d8 3000 	ldr.w	r3, [r8]
 800498a:	b955      	cbnz	r5, 80049a2 <__kernel_rem_pio2+0x30a>
 800498c:	b123      	cbz	r3, 8004998 <__kernel_rem_pio2+0x300>
 800498e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004992:	f8c8 3000 	str.w	r3, [r8]
 8004996:	2301      	movs	r3, #1
 8004998:	3201      	adds	r2, #1
 800499a:	f108 0804 	add.w	r8, r8, #4
 800499e:	461d      	mov	r5, r3
 80049a0:	e752      	b.n	8004848 <__kernel_rem_pio2+0x1b0>
 80049a2:	1acb      	subs	r3, r1, r3
 80049a4:	f8c8 3000 	str.w	r3, [r8]
 80049a8:	462b      	mov	r3, r5
 80049aa:	e7f5      	b.n	8004998 <__kernel_rem_pio2+0x300>
 80049ac:	f3af 8000 	nop.w
	...
 80049bc:	3ff00000 	.word	0x3ff00000
 80049c0:	080052e8 	.word	0x080052e8
 80049c4:	40200000 	.word	0x40200000
 80049c8:	3ff00000 	.word	0x3ff00000
 80049cc:	3e700000 	.word	0x3e700000
 80049d0:	41700000 	.word	0x41700000
 80049d4:	3fe00000 	.word	0x3fe00000
 80049d8:	080052a8 	.word	0x080052a8
 80049dc:	1e62      	subs	r2, r4, #1
 80049de:	ab0e      	add	r3, sp, #56	; 0x38
 80049e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80049e8:	a90e      	add	r1, sp, #56	; 0x38
 80049ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80049ee:	e739      	b.n	8004864 <__kernel_rem_pio2+0x1cc>
 80049f0:	1e62      	subs	r2, r4, #1
 80049f2:	ab0e      	add	r3, sp, #56	; 0x38
 80049f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80049fc:	e7f4      	b.n	80049e8 <__kernel_rem_pio2+0x350>
 80049fe:	a90e      	add	r1, sp, #56	; 0x38
 8004a00:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	430a      	orrs	r2, r1
 8004a08:	e789      	b.n	800491e <__kernel_rem_pio2+0x286>
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d0fa      	beq.n	8004a0a <__kernel_rem_pio2+0x372>
 8004a14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a16:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004a1a:	446a      	add	r2, sp
 8004a1c:	3a98      	subs	r2, #152	; 0x98
 8004a1e:	920a      	str	r2, [sp, #40]	; 0x28
 8004a20:	9a08      	ldr	r2, [sp, #32]
 8004a22:	18e3      	adds	r3, r4, r3
 8004a24:	18a5      	adds	r5, r4, r2
 8004a26:	aa22      	add	r2, sp, #136	; 0x88
 8004a28:	f104 0801 	add.w	r8, r4, #1
 8004a2c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004a30:	9304      	str	r3, [sp, #16]
 8004a32:	9b04      	ldr	r3, [sp, #16]
 8004a34:	4543      	cmp	r3, r8
 8004a36:	da04      	bge.n	8004a42 <__kernel_rem_pio2+0x3aa>
 8004a38:	461c      	mov	r4, r3
 8004a3a:	e6a3      	b.n	8004784 <__kernel_rem_pio2+0xec>
 8004a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e7e4      	b.n	8004a0c <__kernel_rem_pio2+0x374>
 8004a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004a48:	f7fb fd10 	bl	800046c <__aeabi_i2d>
 8004a4c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a52:	46ab      	mov	fp, r5
 8004a54:	461c      	mov	r4, r3
 8004a56:	f04f 0900 	mov.w	r9, #0
 8004a5a:	2600      	movs	r6, #0
 8004a5c:	2700      	movs	r7, #0
 8004a5e:	9b06      	ldr	r3, [sp, #24]
 8004a60:	4599      	cmp	r9, r3
 8004a62:	dd06      	ble.n	8004a72 <__kernel_rem_pio2+0x3da>
 8004a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a66:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004a6a:	f108 0801 	add.w	r8, r8, #1
 8004a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a70:	e7df      	b.n	8004a32 <__kernel_rem_pio2+0x39a>
 8004a72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004a76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004a7a:	f7fb fd61 	bl	8000540 <__aeabi_dmul>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4630      	mov	r0, r6
 8004a84:	4639      	mov	r1, r7
 8004a86:	f7fb fba5 	bl	80001d4 <__adddf3>
 8004a8a:	f109 0901 	add.w	r9, r9, #1
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460f      	mov	r7, r1
 8004a92:	e7e4      	b.n	8004a5e <__kernel_rem_pio2+0x3c6>
 8004a94:	3d01      	subs	r5, #1
 8004a96:	e748      	b.n	800492a <__kernel_rem_pio2+0x292>
 8004a98:	ec47 6b10 	vmov	d0, r6, r7
 8004a9c:	f1ca 0000 	rsb	r0, sl, #0
 8004aa0:	f000 fa92 	bl	8004fc8 <scalbn>
 8004aa4:	ec57 6b10 	vmov	r6, r7, d0
 8004aa8:	4ba0      	ldr	r3, [pc, #640]	; (8004d2c <__kernel_rem_pio2+0x694>)
 8004aaa:	ee10 0a10 	vmov	r0, s0
 8004aae:	2200      	movs	r2, #0
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	f7fb ffcb 	bl	8000a4c <__aeabi_dcmpge>
 8004ab6:	b1f8      	cbz	r0, 8004af8 <__kernel_rem_pio2+0x460>
 8004ab8:	4b9d      	ldr	r3, [pc, #628]	; (8004d30 <__kernel_rem_pio2+0x698>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	4630      	mov	r0, r6
 8004abe:	4639      	mov	r1, r7
 8004ac0:	f7fb fd3e 	bl	8000540 <__aeabi_dmul>
 8004ac4:	f7fb ffec 	bl	8000aa0 <__aeabi_d2iz>
 8004ac8:	4680      	mov	r8, r0
 8004aca:	f7fb fccf 	bl	800046c <__aeabi_i2d>
 8004ace:	4b97      	ldr	r3, [pc, #604]	; (8004d2c <__kernel_rem_pio2+0x694>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f7fb fd35 	bl	8000540 <__aeabi_dmul>
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4639      	mov	r1, r7
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7fb fb77 	bl	80001d0 <__aeabi_dsub>
 8004ae2:	f7fb ffdd 	bl	8000aa0 <__aeabi_d2iz>
 8004ae6:	1c65      	adds	r5, r4, #1
 8004ae8:	ab0e      	add	r3, sp, #56	; 0x38
 8004aea:	f10a 0a18 	add.w	sl, sl, #24
 8004aee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004af2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004af6:	e720      	b.n	800493a <__kernel_rem_pio2+0x2a2>
 8004af8:	4630      	mov	r0, r6
 8004afa:	4639      	mov	r1, r7
 8004afc:	f7fb ffd0 	bl	8000aa0 <__aeabi_d2iz>
 8004b00:	ab0e      	add	r3, sp, #56	; 0x38
 8004b02:	4625      	mov	r5, r4
 8004b04:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004b08:	e717      	b.n	800493a <__kernel_rem_pio2+0x2a2>
 8004b0a:	ab0e      	add	r3, sp, #56	; 0x38
 8004b0c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004b10:	f7fb fcac 	bl	800046c <__aeabi_i2d>
 8004b14:	4632      	mov	r2, r6
 8004b16:	463b      	mov	r3, r7
 8004b18:	f7fb fd12 	bl	8000540 <__aeabi_dmul>
 8004b1c:	4b84      	ldr	r3, [pc, #528]	; (8004d30 <__kernel_rem_pio2+0x698>)
 8004b1e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004b22:	2200      	movs	r2, #0
 8004b24:	4630      	mov	r0, r6
 8004b26:	4639      	mov	r1, r7
 8004b28:	f7fb fd0a 	bl	8000540 <__aeabi_dmul>
 8004b2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b30:	4606      	mov	r6, r0
 8004b32:	460f      	mov	r7, r1
 8004b34:	e70f      	b.n	8004956 <__kernel_rem_pio2+0x2be>
 8004b36:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004b3a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004b3e:	f7fb fcff 	bl	8000540 <__aeabi_dmul>
 8004b42:	4602      	mov	r2, r0
 8004b44:	460b      	mov	r3, r1
 8004b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b4a:	f7fb fb43 	bl	80001d4 <__adddf3>
 8004b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b52:	f108 0801 	add.w	r8, r8, #1
 8004b56:	9b02      	ldr	r3, [sp, #8]
 8004b58:	4598      	cmp	r8, r3
 8004b5a:	dc01      	bgt.n	8004b60 <__kernel_rem_pio2+0x4c8>
 8004b5c:	45b8      	cmp	r8, r7
 8004b5e:	ddea      	ble.n	8004b36 <__kernel_rem_pio2+0x49e>
 8004b60:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004b64:	ab4a      	add	r3, sp, #296	; 0x128
 8004b66:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004b6a:	ed87 7b00 	vstr	d7, [r7]
 8004b6e:	3e01      	subs	r6, #1
 8004b70:	e6f8      	b.n	8004964 <__kernel_rem_pio2+0x2cc>
 8004b72:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	dc0b      	bgt.n	8004b90 <__kernel_rem_pio2+0x4f8>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dc35      	bgt.n	8004be8 <__kernel_rem_pio2+0x550>
 8004b7c:	d059      	beq.n	8004c32 <__kernel_rem_pio2+0x59a>
 8004b7e:	9b04      	ldr	r3, [sp, #16]
 8004b80:	f003 0007 	and.w	r0, r3, #7
 8004b84:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004b88:	ecbd 8b02 	vpop	{d8}
 8004b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b90:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d1f3      	bne.n	8004b7e <__kernel_rem_pio2+0x4e6>
 8004b96:	ab4a      	add	r3, sp, #296	; 0x128
 8004b98:	4423      	add	r3, r4
 8004b9a:	9306      	str	r3, [sp, #24]
 8004b9c:	461c      	mov	r4, r3
 8004b9e:	469a      	mov	sl, r3
 8004ba0:	9502      	str	r5, [sp, #8]
 8004ba2:	9b02      	ldr	r3, [sp, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f1aa 0a08 	sub.w	sl, sl, #8
 8004baa:	dc6b      	bgt.n	8004c84 <__kernel_rem_pio2+0x5ec>
 8004bac:	46aa      	mov	sl, r5
 8004bae:	f1ba 0f01 	cmp.w	sl, #1
 8004bb2:	f1a4 0408 	sub.w	r4, r4, #8
 8004bb6:	f300 8085 	bgt.w	8004cc4 <__kernel_rem_pio2+0x62c>
 8004bba:	9c06      	ldr	r4, [sp, #24]
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	3408      	adds	r4, #8
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2d01      	cmp	r5, #1
 8004bc4:	f300 809d 	bgt.w	8004d02 <__kernel_rem_pio2+0x66a>
 8004bc8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004bcc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004bd0:	f1bb 0f00 	cmp.w	fp, #0
 8004bd4:	f040 809b 	bne.w	8004d0e <__kernel_rem_pio2+0x676>
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	e9c3 5600 	strd	r5, r6, [r3]
 8004bde:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004be2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004be6:	e7ca      	b.n	8004b7e <__kernel_rem_pio2+0x4e6>
 8004be8:	3408      	adds	r4, #8
 8004bea:	ab4a      	add	r3, sp, #296	; 0x128
 8004bec:	441c      	add	r4, r3
 8004bee:	462e      	mov	r6, r5
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	2e00      	cmp	r6, #0
 8004bf6:	da36      	bge.n	8004c66 <__kernel_rem_pio2+0x5ce>
 8004bf8:	f1bb 0f00 	cmp.w	fp, #0
 8004bfc:	d039      	beq.n	8004c72 <__kernel_rem_pio2+0x5da>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c04:	9c01      	ldr	r4, [sp, #4]
 8004c06:	e9c4 2300 	strd	r2, r3, [r4]
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004c12:	f7fb fadd 	bl	80001d0 <__aeabi_dsub>
 8004c16:	ae4c      	add	r6, sp, #304	; 0x130
 8004c18:	2401      	movs	r4, #1
 8004c1a:	42a5      	cmp	r5, r4
 8004c1c:	da2c      	bge.n	8004c78 <__kernel_rem_pio2+0x5e0>
 8004c1e:	f1bb 0f00 	cmp.w	fp, #0
 8004c22:	d002      	beq.n	8004c2a <__kernel_rem_pio2+0x592>
 8004c24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c28:	4619      	mov	r1, r3
 8004c2a:	9b01      	ldr	r3, [sp, #4]
 8004c2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004c30:	e7a5      	b.n	8004b7e <__kernel_rem_pio2+0x4e6>
 8004c32:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004c36:	eb0d 0403 	add.w	r4, sp, r3
 8004c3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004c3e:	2000      	movs	r0, #0
 8004c40:	2100      	movs	r1, #0
 8004c42:	2d00      	cmp	r5, #0
 8004c44:	da09      	bge.n	8004c5a <__kernel_rem_pio2+0x5c2>
 8004c46:	f1bb 0f00 	cmp.w	fp, #0
 8004c4a:	d002      	beq.n	8004c52 <__kernel_rem_pio2+0x5ba>
 8004c4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c50:	4619      	mov	r1, r3
 8004c52:	9b01      	ldr	r3, [sp, #4]
 8004c54:	e9c3 0100 	strd	r0, r1, [r3]
 8004c58:	e791      	b.n	8004b7e <__kernel_rem_pio2+0x4e6>
 8004c5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004c5e:	f7fb fab9 	bl	80001d4 <__adddf3>
 8004c62:	3d01      	subs	r5, #1
 8004c64:	e7ed      	b.n	8004c42 <__kernel_rem_pio2+0x5aa>
 8004c66:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004c6a:	f7fb fab3 	bl	80001d4 <__adddf3>
 8004c6e:	3e01      	subs	r6, #1
 8004c70:	e7c0      	b.n	8004bf4 <__kernel_rem_pio2+0x55c>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	e7c5      	b.n	8004c04 <__kernel_rem_pio2+0x56c>
 8004c78:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004c7c:	f7fb faaa 	bl	80001d4 <__adddf3>
 8004c80:	3401      	adds	r4, #1
 8004c82:	e7ca      	b.n	8004c1a <__kernel_rem_pio2+0x582>
 8004c84:	e9da 8900 	ldrd	r8, r9, [sl]
 8004c88:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004c8c:	9b02      	ldr	r3, [sp, #8]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	9302      	str	r3, [sp, #8]
 8004c92:	4632      	mov	r2, r6
 8004c94:	463b      	mov	r3, r7
 8004c96:	4640      	mov	r0, r8
 8004c98:	4649      	mov	r1, r9
 8004c9a:	f7fb fa9b 	bl	80001d4 <__adddf3>
 8004c9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4640      	mov	r0, r8
 8004ca8:	4649      	mov	r1, r9
 8004caa:	f7fb fa91 	bl	80001d0 <__aeabi_dsub>
 8004cae:	4632      	mov	r2, r6
 8004cb0:	463b      	mov	r3, r7
 8004cb2:	f7fb fa8f 	bl	80001d4 <__adddf3>
 8004cb6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004cba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004cbe:	ed8a 7b00 	vstr	d7, [sl]
 8004cc2:	e76e      	b.n	8004ba2 <__kernel_rem_pio2+0x50a>
 8004cc4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004cc8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004ccc:	4640      	mov	r0, r8
 8004cce:	4632      	mov	r2, r6
 8004cd0:	463b      	mov	r3, r7
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	f7fb fa7e 	bl	80001d4 <__adddf3>
 8004cd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4640      	mov	r0, r8
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	f7fb fa74 	bl	80001d0 <__aeabi_dsub>
 8004ce8:	4632      	mov	r2, r6
 8004cea:	463b      	mov	r3, r7
 8004cec:	f7fb fa72 	bl	80001d4 <__adddf3>
 8004cf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004cf8:	ed84 7b00 	vstr	d7, [r4]
 8004cfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d00:	e755      	b.n	8004bae <__kernel_rem_pio2+0x516>
 8004d02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d06:	f7fb fa65 	bl	80001d4 <__adddf3>
 8004d0a:	3d01      	subs	r5, #1
 8004d0c:	e759      	b.n	8004bc2 <__kernel_rem_pio2+0x52a>
 8004d0e:	9b01      	ldr	r3, [sp, #4]
 8004d10:	9a01      	ldr	r2, [sp, #4]
 8004d12:	601d      	str	r5, [r3, #0]
 8004d14:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004d18:	605c      	str	r4, [r3, #4]
 8004d1a:	609f      	str	r7, [r3, #8]
 8004d1c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004d20:	60d3      	str	r3, [r2, #12]
 8004d22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d26:	6110      	str	r0, [r2, #16]
 8004d28:	6153      	str	r3, [r2, #20]
 8004d2a:	e728      	b.n	8004b7e <__kernel_rem_pio2+0x4e6>
 8004d2c:	41700000 	.word	0x41700000
 8004d30:	3e700000 	.word	0x3e700000
 8004d34:	00000000 	.word	0x00000000

08004d38 <__kernel_sin>:
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	ed2d 8b04 	vpush	{d8-d9}
 8004d40:	eeb0 8a41 	vmov.f32	s16, s2
 8004d44:	eef0 8a61 	vmov.f32	s17, s3
 8004d48:	ec55 4b10 	vmov	r4, r5, d0
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004d52:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004d56:	9001      	str	r0, [sp, #4]
 8004d58:	da06      	bge.n	8004d68 <__kernel_sin+0x30>
 8004d5a:	ee10 0a10 	vmov	r0, s0
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f7fb fe9e 	bl	8000aa0 <__aeabi_d2iz>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d051      	beq.n	8004e0c <__kernel_sin+0xd4>
 8004d68:	4622      	mov	r2, r4
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f7fb fbe6 	bl	8000540 <__aeabi_dmul>
 8004d74:	4682      	mov	sl, r0
 8004d76:	468b      	mov	fp, r1
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	4629      	mov	r1, r5
 8004d80:	f7fb fbde 	bl	8000540 <__aeabi_dmul>
 8004d84:	a341      	add	r3, pc, #260	; (adr r3, 8004e8c <__kernel_sin+0x154>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	4680      	mov	r8, r0
 8004d8c:	4689      	mov	r9, r1
 8004d8e:	4650      	mov	r0, sl
 8004d90:	4659      	mov	r1, fp
 8004d92:	f7fb fbd5 	bl	8000540 <__aeabi_dmul>
 8004d96:	a33f      	add	r3, pc, #252	; (adr r3, 8004e94 <__kernel_sin+0x15c>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f7fb fa18 	bl	80001d0 <__aeabi_dsub>
 8004da0:	4652      	mov	r2, sl
 8004da2:	465b      	mov	r3, fp
 8004da4:	f7fb fbcc 	bl	8000540 <__aeabi_dmul>
 8004da8:	a33c      	add	r3, pc, #240	; (adr r3, 8004e9c <__kernel_sin+0x164>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	f7fb fa11 	bl	80001d4 <__adddf3>
 8004db2:	4652      	mov	r2, sl
 8004db4:	465b      	mov	r3, fp
 8004db6:	f7fb fbc3 	bl	8000540 <__aeabi_dmul>
 8004dba:	a33a      	add	r3, pc, #232	; (adr r3, 8004ea4 <__kernel_sin+0x16c>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f7fb fa06 	bl	80001d0 <__aeabi_dsub>
 8004dc4:	4652      	mov	r2, sl
 8004dc6:	465b      	mov	r3, fp
 8004dc8:	f7fb fbba 	bl	8000540 <__aeabi_dmul>
 8004dcc:	a337      	add	r3, pc, #220	; (adr r3, 8004eac <__kernel_sin+0x174>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb f9ff 	bl	80001d4 <__adddf3>
 8004dd6:	9b01      	ldr	r3, [sp, #4]
 8004dd8:	4606      	mov	r6, r0
 8004dda:	460f      	mov	r7, r1
 8004ddc:	b9eb      	cbnz	r3, 8004e1a <__kernel_sin+0xe2>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4650      	mov	r0, sl
 8004de4:	4659      	mov	r1, fp
 8004de6:	f7fb fbab 	bl	8000540 <__aeabi_dmul>
 8004dea:	a325      	add	r3, pc, #148	; (adr r3, 8004e80 <__kernel_sin+0x148>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f7fb f9ee 	bl	80001d0 <__aeabi_dsub>
 8004df4:	4642      	mov	r2, r8
 8004df6:	464b      	mov	r3, r9
 8004df8:	f7fb fba2 	bl	8000540 <__aeabi_dmul>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4620      	mov	r0, r4
 8004e02:	4629      	mov	r1, r5
 8004e04:	f7fb f9e6 	bl	80001d4 <__adddf3>
 8004e08:	4604      	mov	r4, r0
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	ec45 4b10 	vmov	d0, r4, r5
 8004e10:	b003      	add	sp, #12
 8004e12:	ecbd 8b04 	vpop	{d8-d9}
 8004e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e1a:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <__kernel_sin+0x150>)
 8004e1c:	ec51 0b18 	vmov	r0, r1, d8
 8004e20:	2200      	movs	r2, #0
 8004e22:	f7fb fb8d 	bl	8000540 <__aeabi_dmul>
 8004e26:	4632      	mov	r2, r6
 8004e28:	ec41 0b19 	vmov	d9, r0, r1
 8004e2c:	463b      	mov	r3, r7
 8004e2e:	4640      	mov	r0, r8
 8004e30:	4649      	mov	r1, r9
 8004e32:	f7fb fb85 	bl	8000540 <__aeabi_dmul>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	ec51 0b19 	vmov	r0, r1, d9
 8004e3e:	f7fb f9c7 	bl	80001d0 <__aeabi_dsub>
 8004e42:	4652      	mov	r2, sl
 8004e44:	465b      	mov	r3, fp
 8004e46:	f7fb fb7b 	bl	8000540 <__aeabi_dmul>
 8004e4a:	ec53 2b18 	vmov	r2, r3, d8
 8004e4e:	f7fb f9bf 	bl	80001d0 <__aeabi_dsub>
 8004e52:	a30b      	add	r3, pc, #44	; (adr r3, 8004e80 <__kernel_sin+0x148>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	4606      	mov	r6, r0
 8004e5a:	460f      	mov	r7, r1
 8004e5c:	4640      	mov	r0, r8
 8004e5e:	4649      	mov	r1, r9
 8004e60:	f7fb fb6e 	bl	8000540 <__aeabi_dmul>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4630      	mov	r0, r6
 8004e6a:	4639      	mov	r1, r7
 8004e6c:	f7fb f9b2 	bl	80001d4 <__adddf3>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4620      	mov	r0, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f7fb f9aa 	bl	80001d0 <__aeabi_dsub>
 8004e7c:	e7c4      	b.n	8004e08 <__kernel_sin+0xd0>
 8004e7e:	bf00      	nop
 8004e80:	55555549 	.word	0x55555549
 8004e84:	3fc55555 	.word	0x3fc55555
 8004e88:	3fe00000 	.word	0x3fe00000
 8004e8c:	5acfd57c 	.word	0x5acfd57c
 8004e90:	3de5d93a 	.word	0x3de5d93a
 8004e94:	8a2b9ceb 	.word	0x8a2b9ceb
 8004e98:	3e5ae5e6 	.word	0x3e5ae5e6
 8004e9c:	57b1fe7d 	.word	0x57b1fe7d
 8004ea0:	3ec71de3 	.word	0x3ec71de3
 8004ea4:	19c161d5 	.word	0x19c161d5
 8004ea8:	3f2a01a0 	.word	0x3f2a01a0
 8004eac:	1110f8a6 	.word	0x1110f8a6
 8004eb0:	3f811111 	.word	0x3f811111

08004eb4 <fabs>:
 8004eb4:	ec51 0b10 	vmov	r0, r1, d0
 8004eb8:	ee10 2a10 	vmov	r2, s0
 8004ebc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004ec0:	ec43 2b10 	vmov	d0, r2, r3
 8004ec4:	4770      	bx	lr
	...

08004ec8 <floor>:
 8004ec8:	ec51 0b10 	vmov	r0, r1, d0
 8004ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004ed4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004ed8:	2e13      	cmp	r6, #19
 8004eda:	ee10 5a10 	vmov	r5, s0
 8004ede:	ee10 8a10 	vmov	r8, s0
 8004ee2:	460c      	mov	r4, r1
 8004ee4:	dc32      	bgt.n	8004f4c <floor+0x84>
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	da14      	bge.n	8004f14 <floor+0x4c>
 8004eea:	a333      	add	r3, pc, #204	; (adr r3, 8004fb8 <floor+0xf0>)
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	f7fb f970 	bl	80001d4 <__adddf3>
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f7fb fdb2 	bl	8000a60 <__aeabi_dcmpgt>
 8004efc:	b138      	cbz	r0, 8004f0e <floor+0x46>
 8004efe:	2c00      	cmp	r4, #0
 8004f00:	da57      	bge.n	8004fb2 <floor+0xea>
 8004f02:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004f06:	431d      	orrs	r5, r3
 8004f08:	d001      	beq.n	8004f0e <floor+0x46>
 8004f0a:	4c2d      	ldr	r4, [pc, #180]	; (8004fc0 <floor+0xf8>)
 8004f0c:	2500      	movs	r5, #0
 8004f0e:	4621      	mov	r1, r4
 8004f10:	4628      	mov	r0, r5
 8004f12:	e025      	b.n	8004f60 <floor+0x98>
 8004f14:	4f2b      	ldr	r7, [pc, #172]	; (8004fc4 <floor+0xfc>)
 8004f16:	4137      	asrs	r7, r6
 8004f18:	ea01 0307 	and.w	r3, r1, r7
 8004f1c:	4303      	orrs	r3, r0
 8004f1e:	d01f      	beq.n	8004f60 <floor+0x98>
 8004f20:	a325      	add	r3, pc, #148	; (adr r3, 8004fb8 <floor+0xf0>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb f955 	bl	80001d4 <__adddf3>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f7fb fd97 	bl	8000a60 <__aeabi_dcmpgt>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	d0eb      	beq.n	8004f0e <floor+0x46>
 8004f36:	2c00      	cmp	r4, #0
 8004f38:	bfbe      	ittt	lt
 8004f3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004f3e:	fa43 f606 	asrlt.w	r6, r3, r6
 8004f42:	19a4      	addlt	r4, r4, r6
 8004f44:	ea24 0407 	bic.w	r4, r4, r7
 8004f48:	2500      	movs	r5, #0
 8004f4a:	e7e0      	b.n	8004f0e <floor+0x46>
 8004f4c:	2e33      	cmp	r6, #51	; 0x33
 8004f4e:	dd0b      	ble.n	8004f68 <floor+0xa0>
 8004f50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004f54:	d104      	bne.n	8004f60 <floor+0x98>
 8004f56:	ee10 2a10 	vmov	r2, s0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	f7fb f93a 	bl	80001d4 <__adddf3>
 8004f60:	ec41 0b10 	vmov	d0, r0, r1
 8004f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f68:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f70:	fa23 f707 	lsr.w	r7, r3, r7
 8004f74:	4207      	tst	r7, r0
 8004f76:	d0f3      	beq.n	8004f60 <floor+0x98>
 8004f78:	a30f      	add	r3, pc, #60	; (adr r3, 8004fb8 <floor+0xf0>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	f7fb f929 	bl	80001d4 <__adddf3>
 8004f82:	2200      	movs	r2, #0
 8004f84:	2300      	movs	r3, #0
 8004f86:	f7fb fd6b 	bl	8000a60 <__aeabi_dcmpgt>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	d0bf      	beq.n	8004f0e <floor+0x46>
 8004f8e:	2c00      	cmp	r4, #0
 8004f90:	da02      	bge.n	8004f98 <floor+0xd0>
 8004f92:	2e14      	cmp	r6, #20
 8004f94:	d103      	bne.n	8004f9e <floor+0xd6>
 8004f96:	3401      	adds	r4, #1
 8004f98:	ea25 0507 	bic.w	r5, r5, r7
 8004f9c:	e7b7      	b.n	8004f0e <floor+0x46>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004fa4:	fa03 f606 	lsl.w	r6, r3, r6
 8004fa8:	4435      	add	r5, r6
 8004faa:	4545      	cmp	r5, r8
 8004fac:	bf38      	it	cc
 8004fae:	18e4      	addcc	r4, r4, r3
 8004fb0:	e7f2      	b.n	8004f98 <floor+0xd0>
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	462c      	mov	r4, r5
 8004fb6:	e7aa      	b.n	8004f0e <floor+0x46>
 8004fb8:	8800759c 	.word	0x8800759c
 8004fbc:	7e37e43c 	.word	0x7e37e43c
 8004fc0:	bff00000 	.word	0xbff00000
 8004fc4:	000fffff 	.word	0x000fffff

08004fc8 <scalbn>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	ec55 4b10 	vmov	r4, r5, d0
 8004fce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	462b      	mov	r3, r5
 8004fd6:	b99a      	cbnz	r2, 8005000 <scalbn+0x38>
 8004fd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004fdc:	4323      	orrs	r3, r4
 8004fde:	d036      	beq.n	800504e <scalbn+0x86>
 8004fe0:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <scalbn+0x100>)
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	ee10 0a10 	vmov	r0, s0
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f7fb faa9 	bl	8000540 <__aeabi_dmul>
 8004fee:	4b37      	ldr	r3, [pc, #220]	; (80050cc <scalbn+0x104>)
 8004ff0:	429e      	cmp	r6, r3
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	da10      	bge.n	800501a <scalbn+0x52>
 8004ff8:	a32b      	add	r3, pc, #172	; (adr r3, 80050a8 <scalbn+0xe0>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	e03a      	b.n	8005076 <scalbn+0xae>
 8005000:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005004:	428a      	cmp	r2, r1
 8005006:	d10c      	bne.n	8005022 <scalbn+0x5a>
 8005008:	ee10 2a10 	vmov	r2, s0
 800500c:	4620      	mov	r0, r4
 800500e:	4629      	mov	r1, r5
 8005010:	f7fb f8e0 	bl	80001d4 <__adddf3>
 8005014:	4604      	mov	r4, r0
 8005016:	460d      	mov	r5, r1
 8005018:	e019      	b.n	800504e <scalbn+0x86>
 800501a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800501e:	460b      	mov	r3, r1
 8005020:	3a36      	subs	r2, #54	; 0x36
 8005022:	4432      	add	r2, r6
 8005024:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005028:	428a      	cmp	r2, r1
 800502a:	dd08      	ble.n	800503e <scalbn+0x76>
 800502c:	2d00      	cmp	r5, #0
 800502e:	a120      	add	r1, pc, #128	; (adr r1, 80050b0 <scalbn+0xe8>)
 8005030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005034:	da1c      	bge.n	8005070 <scalbn+0xa8>
 8005036:	a120      	add	r1, pc, #128	; (adr r1, 80050b8 <scalbn+0xf0>)
 8005038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800503c:	e018      	b.n	8005070 <scalbn+0xa8>
 800503e:	2a00      	cmp	r2, #0
 8005040:	dd08      	ble.n	8005054 <scalbn+0x8c>
 8005042:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005046:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800504a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800504e:	ec45 4b10 	vmov	d0, r4, r5
 8005052:	bd70      	pop	{r4, r5, r6, pc}
 8005054:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005058:	da19      	bge.n	800508e <scalbn+0xc6>
 800505a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800505e:	429e      	cmp	r6, r3
 8005060:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005064:	dd0a      	ble.n	800507c <scalbn+0xb4>
 8005066:	a112      	add	r1, pc, #72	; (adr r1, 80050b0 <scalbn+0xe8>)
 8005068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e2      	bne.n	8005036 <scalbn+0x6e>
 8005070:	a30f      	add	r3, pc, #60	; (adr r3, 80050b0 <scalbn+0xe8>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb fa63 	bl	8000540 <__aeabi_dmul>
 800507a:	e7cb      	b.n	8005014 <scalbn+0x4c>
 800507c:	a10a      	add	r1, pc, #40	; (adr r1, 80050a8 <scalbn+0xe0>)
 800507e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0b8      	beq.n	8004ff8 <scalbn+0x30>
 8005086:	a10e      	add	r1, pc, #56	; (adr r1, 80050c0 <scalbn+0xf8>)
 8005088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800508c:	e7b4      	b.n	8004ff8 <scalbn+0x30>
 800508e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005092:	3236      	adds	r2, #54	; 0x36
 8005094:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005098:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800509c:	4620      	mov	r0, r4
 800509e:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <scalbn+0x108>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	e7e8      	b.n	8005076 <scalbn+0xae>
 80050a4:	f3af 8000 	nop.w
 80050a8:	c2f8f359 	.word	0xc2f8f359
 80050ac:	01a56e1f 	.word	0x01a56e1f
 80050b0:	8800759c 	.word	0x8800759c
 80050b4:	7e37e43c 	.word	0x7e37e43c
 80050b8:	8800759c 	.word	0x8800759c
 80050bc:	fe37e43c 	.word	0xfe37e43c
 80050c0:	c2f8f359 	.word	0xc2f8f359
 80050c4:	81a56e1f 	.word	0x81a56e1f
 80050c8:	43500000 	.word	0x43500000
 80050cc:	ffff3cb0 	.word	0xffff3cb0
 80050d0:	3c900000 	.word	0x3c900000

080050d4 <_init>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr

080050e0 <_fini>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	bf00      	nop
 80050e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e6:	bc08      	pop	{r3}
 80050e8:	469e      	mov	lr, r3
 80050ea:	4770      	bx	lr
